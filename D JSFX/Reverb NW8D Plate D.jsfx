desc:NW8 Plate Reverb (DD)
/*
Version: 1.1
author: chmaha
about:
  Uses DSP from airwindows "kPlateA" by Chris Johnson
  https://github.com/airwindows/airwindows/tree/master/plugins/LinuxVST/src/kPlateA (MIT License)
  JSFX version released under GPLv3 license
*/
slider1:color=0<0,3,1>-Type
slider2:B=0.5<0,1,0.01>-Damping
slider3:hpf=0<0,5000,1>-HPF Frequency (Hz)
slider4:D=0<0,1,0.01>-Predelay
slider6:lpf=10000<20,10000,1>-LPF Frequency (Hz)
slider7:duckthres=0<-60,0,0.1>-Threshold (dB)
slider8:duckratio=4<1,10,0.5>-Ratio
//slider9:_wet=20<0,100,1>-Wet
//slider10:_dry=100<0,100,1>-Dry
slider9:_wet=-6<-48,6,0.1>-Wet (dB)
slider10:_dry=0<-48,6,0.1>-Dry (dB)
slider11:ext_duck=0<0,1,1>-Sidechain Duck

import DGFX/nw8platefunctions.jsfx-inc
import DGFX/demian-effects.jsfx-inc
import DGFX/tk_lib_d.jsfx-inc 

options:gmem=NW8PlateD     
options:no_meter

filename:0,DGFX/nw8plate/bg.png
filename:1,DGFX/nw8plate/bgmcp.png
filename:2,DGFX/nw8plate/button.png
filename:3,DGFX/nw8plate/knob-black.png
filename:4,DGFX/nw8plate/knob-white.png
filename:5,DGFX/nw8plate/knob-blue.png

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output
in_pin:sidechain left input
in_pin:sidechain right input
@init
  gfx_ext_retina = 1;
  gfx_clear=0;
  lastCap=1;
  mouse_wheel=1;
  Number_input = 0;
  number_input_invalid = 0;
  number_input_x = 0;
  number_input_y=0;
  ext_noinit=1;

  // tk extra features
  lastCap=1;
  mouse_wheel=1;
  is_recording = 0; is_playing = 0; is_stopped = 1;
  !initialized_playstates?(while_playing = while_recording = while_stopped = 1);
  Number_input = 0;
  number_input_raw = 0;
  number_input_use = 0;
  komma = 0;
  in_key = 0;
  number_input_x = 0;
  number_input_y=0;
  number_input_slider = 0;
  number_input_min=0;
  number_input_max=0;
  number_input_invalid = 0;
  number_input_sign=1;
  s2_numbers_of_sliders = 11; // set the number of sliders for gorup linking

  function typeselect()(
    dtype_prev=dtype;
    color==0?dtype="A":
    color==1?dtype="B":
    color==2?dtype="C":
    color==3?dtype="D";
    dtype_prev!=dtype?(nw8_init(dtype);clear_all_buffers()); // only call the initialize section when changing the type of reverb
  );
  mouse_sensivity();
  function parameters_update() (
    parameters_update_on = 1;
    group_parameters(max_local_buffer_size-64); // tk extra features
    // Paste all contents of @slider here
      typeselect();
    parameters_update_on = 0;
    caller = 0;
  );
    color==0?dtype="A":
    color==1?dtype="B":
    color==2?dtype="C":
    color==3?dtype="D";
    nw8_init(dtype);

@slider
  //A = slider1;
  /*
  B = slider2;
  C = slider3;
  D = slider4;
  E = slider5;
  */
  caller=1;

@serialize // add this block for tk extra features
  file_var(0, while_playing);
  file_var(0, while_recording);
  file_var(0, while_stopped); file_var(0, zoom_off);
  //file_var(0, LA2Kan_VERSION);
  file_var(0, link_group);
  seriloop = 0;
  loop(64*16 + 27 + 16 +16 +16,
  file_var(0, gmem[seriloop]);
  seriloop += 1;
  );
  seriloop = 0;
  loop(200*16,
  file_var(0, group_generics[seriloop]);
  seriloop += 1;
  );

@block
  nw8_block(dtype);

@sample
  S2_sample_on = 1;

  // extra tk features
  gmem[16*64 + 10 + link_group] != 1 ? link_group = 0;
  group_check_smpl();

  caller == 1 ? (
    parameters_update_on == 0 ? (
      parameters_update();
    );
  );

  // extra tk features
  playstates();
  process = 0;
  while_playing ? is_playing ? process = 1;
  while_recording ? is_recording ? process = 1;
  while_stopped ? is_stopped ? process = 1;
  initialized_playstates=1;

  process == 1 ? (
    nw8_sample(dtype);

    hpf.channel_filter_highpass_stereo(inputSampleL,inputSampleR,hpf,22);
    inputSampleL=hpf.spl_l;
    inputSampleR=hpf.spl_r;

    lpf.channel_filter_lowpass_stereo(inputSampleL,inputSampleR,lpf,10000);
    inputSampleL=lpf.spl_l;
    inputSampleR=lpf.spl_r;

    duck_spl_L= ext_duck?spl2:spl0;
    duck_spl_R= ext_duck?spl3:spl1;
    compress.channel_ducking_stereo(inputSampleL,inputSampleR,duck_spl_L,duck_spl_R,duckthres,duckratio);
    inputSampleL=compress.spl_l;
    inputSampleR=compress.spl_r;
    
    //wet=_wet/100;
    //dry=_dry/100;
    dry = _dry <= -48.0 ? 0.0 : 10^(_dry/20);
    wet = _wet <= -48.0 ? 0.0 : 10^(_wet/20)*0.5;

    spl0 = spl0*dry + inputSampleL*wet;
    spl1 = spl1*dry + inputSampleR*wet;
  );

<? // @gfx setup
  w_bg=768;
  h_bg=324;
  mcp_ratio="tall";
  include("DGFX/ddconfig.jsfx-inc");
?>
  function handle_parameter_type()(
    !Number_input ?(  // if not default handling
      mouseClick == 1 ? (
        this.k_collision() ? (this.dragstart());
      ); 
      mouseclick == -1 ? (  // stop knobs dragging
        this.dragstop();
      );
      this.isrev==0 || this.isrev==3?(
        mouse_wheel ? (  // handle wheel
          this.k_collision() ? this.potwheel();
          
          caller = 1;
        );
        gfx_a=1;  // handle drag
        this.dragging ? (this.potdrag();caller = 1;);
      ):this.isrev==1 || this.isrev==2?(
        mouse_wheel ? (  // handle wheel
          this.k_collision() ? this.potwheel_rev();
          
          caller = 1;
        );
        gfx_a=1;  // handle drag
        this.dragging ? (this.potdrag_rev();caller = 1;);
      );
      this.dragging ? (
        gfx_setfont(1,"Verdana");
        color == 0 ? (
          sprintf(#readout, "%s", "A");
        ): color == 1 ?(
          sprintf(#readout, "%s", "B");
        ): color == 2 ?(
          sprintf(#readout, "%s", "C");
        ): color == 3 ?(
          sprintf(#readout, "%s", "D");
        );
        gfx_x = this.xIn*zoom; gfx_y = this.yIn*zoom - gfx_texth - 2*zoom;
        gfx_y<0?gfx_y=0;
        gfx_x<0?gfx_x=0;
        gfx_measurestr(#readout, rdow, rdoh);
        gfx_r=gfx_b=gfx_g=0; gfx_a=0.4; gfx_rect(gfx_x+2*zoom, gfx_y, rdow+3*zoom, gfx_texth+2*zoom);
        gfx_r=gfx_g=gfx_b=1; gfx_a=0.7;
        gfx_x += 3*zoom;
        gfx_drawstr(#readout);
        gfx_a=1;
      );
    );
    input_handling();
  );

  tk_gfx_setup();
  gfx_ext_flags == 0 ? (  // full ui
    set_background(0);
    gfx_a=1;  
    // y= 60 & 175
    // x= each parameter offset by 100px, starting from 65
    kHPF.parameter_config     ( 3,   0,   0, 5000,     1, 133/2,  60/2, 0, 1, 3, 1, 0);
    kLPF.parameter_config     ( 6,10000, 20,10000,     1, 233/2,  60/2, 0, 1, 3, 1, 0);
    kthresh.parameter_config  ( 7,   0, -60,    0,   0.1, 333/2,  60/2, 0, 1, 3, 1, 0);
    kratio.parameter_config   ( 8,   4,   1,   10,   0.5, 433/2,  60/2, 0, 1, 3, 1, 0);
    kspecial.parameter_config ( 1,   0,   0,    3,     1, 533/2,  60/2, 0, 1, 4, 0, 0);
      kspecial.draw_parameter();
      kspecial.handle_parameter_type();
    kpredelay.parameter_config( 4,   0,   0,    1,  0.01, 185/2, 175/2, 0, 1, 5, 1, 0);
    ksustain.parameter_config ( 2, 0.5,   0,    1,  0.01, 285/2, 175/2, 0, 1, 5, 1, 0);
    kwet.parameter_config     ( 9,  -6, -48,    6,   0.1, 385/2, 175/2, 0, 1, 5, 1, 0);
    kdry.parameter_config     (10,   0, -48,    6,   0.1, 485/2, 175/2, 0, 1, 4, 1, 0);

    gfx_r=gfx_g=gfx_b=gfx_a=0.7; // LABELS
    kthresh.attached_label("THRESH",0, "Verdana",13,'b');
    kratio.attached_label("RATIO",0, "Verdana",13,'b');
    kHPF.attached_label("HPF",0, "Verdana",13,'b');
    kLPF.attached_label("LPF",0, "Verdana",13,'b');
    kspecial.attached_label("TYPE",0, "Verdana",13,'b');
    kpredelay.attached_label("PREDELAY",0, "Verdana",13,'b');
    ksustain.attached_label("DAMPING",0, "Verdana",13,'b');
    kdry.attached_label("DRY",0, "Verdana",13,'b');
    kwet.attached_label("WET",0, "Verdana",13,'b');
    setup_dmenu_delayreverb("Chmaha: NW8-Plate, port of Aiwrindows: kPlate", "1", "Analog Obsession, Tukan Studios, Pitufodelbosque, ReArtist", 0.3); // setup menu, arguments: jsfx name, version, graphics, zoom
    mouse_wheel=0;
  ):gfx_ext_flags == 1 ? ( // embedded mcp ui
    set_background(1,0.655,0.596,0.235);
    kHPF.parameter_config     ( 3,   0,   0, 5000,     1,   33/2,  10/2, 0, 1, 3, 1, 0);
    kLPF.parameter_config     ( 6,10000, 20,10000,     1,  141/2,  10/2, 0, 1, 3, 1, 0);
    kpredelay.parameter_config( 4,   0,   0,    1,  0.01,    6/2, 105/2, 0, 1, 5, 1, 0);
    ksustain.parameter_config ( 2, 0.5,   0,    1,  0.01,   83/2, 105/2, 0, 1, 5, 1, 0);
    kwet.parameter_config     ( 9,  -6, -48,    6,   0.1,  160/2, 105/2, 0, 1, 5, 1, 0);
    kthresh.parameter_config  ( 7,   0, -60,    0,   0.1,   33/2, 200/2, 0, 1, 3, 1, 0);
    kratio.parameter_config   ( 8,   4,   1,   10,   0.5,  141/2, 200/2, 0, 1, 3, 1, 0);
    gfx_r=gfx_g=gfx_b=gfx_a=0.7; // LABELS
    kHPF.attached_label("HPF",-4, "Verdana",22,'b');
    kLPF.attached_label("LPF",-4, "Verdana",22,'b');
    kthresh.attached_label("THR",-4, "Verdana",22,'b');
    kratio.attached_label("RAT",-4, "Verdana",22,'b');
    kpredelay.attached_label("PRE",-4, "Verdana",22,'b');
    ksustain.attached_label("DAMP",-4, "Verdana",22,'b');
    kwet.attached_label("WET",-4, "Verdana",22,'b');
    mouse_wheel=0;
  );
  
  // update parameters
  S2_sample_on == 0 ? (
  gmem[16*64 + 10 + link_group] != 1 ? link_group = 0; // tk extra features
  group_check_smpl(); // tk extra features
    caller == 1 ? (
        parameters_update_on == 0 ? (
          parameters_update();
        );
    );
  );
  S2_sample_on = 0;

  
