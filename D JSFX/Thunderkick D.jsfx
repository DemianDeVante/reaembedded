// This effect Copyright (C) 2007 and later Thomas Scott Stillwell
// Based on mdctfilter Copyright 2004 and later by Cockos Incorporated
// License: GPL - http://www.gnu.org/licenses/gpl.html
// 

desc: Thunderkick (DD)
//tags: processing generator filter synthesis
//author: Stillwell

slider1:-6<-40,40,0.1>-Effect (dB)
slider2:4<1,30,1>-Cutoff
slider3:0<-40,40,0.1>-Gain (dB)
slider4:1<0,10,1>-Shift

filename:0,DGFX/thunderkick/bg.png
filename:1,DGFX/thunderkick/bgmcp.png
filename:2,DGFX/thunderkick/knob.png
filename:3,DGFX/thunderkick/screw.png

import DGFX/tk_lib_d.jsfx-inc 

options:no_meter
// write a cool name to store jsfx memory below
options:gmem=thunderkickD 

@init
  gfx_ext_retina = 1;
  gfx_clear=0;
  lastCap=1;
  mouse_wheel=1;
  Number_input = 0;
  number_input_invalid = 0;
  number_input_x = 0;
  number_input_y=0;
  ext_noinit=1;

  // tk extra features
  lastCap=1;
  mouse_wheel=1;
  is_recording = 0; is_playing = 0; is_stopped = 1;
  !initialized_playstates?(while_playing = while_recording = while_stopped = 1);
  Number_input = 0;
  number_input_raw = 0;
  number_input_use = 0;
  komma = 0;
  in_key = 0;
  number_input_x = 0;
  number_input_y=0;
  number_input_slider = 0;
  number_input_min=0;
  number_input_max=0;
  number_input_invalid = 0;
  number_input_sign=1;
  s2_numbers_of_sliders = 4; // set the number of sliders for gorup linking


  mouse_sensivity();

  fftsize=1024;
  ext_tail_size = fftsize*8;
  bucketsize = (srate * 0.5 ) / fftsize;
  bufpos=bi1=0; 
  bi2=fftsize*2; 
  halfsize=fftsize*0.5;
  bands = slider2;
  gain = 2 ^ (slider3 / 6);
  shift = slider4;

  function parameters_update() (
    parameters_update_on = 1;
    group_parameters(max_local_buffer_size-64); // tk extra features
    adj=2 ^ (slider1/6);
    bands = slider2;
    gain = 2 ^ (slider3 / 6);
    shift = (slider4 < slider2 ? slider4 : slider2);
    slider4 = shift;
    parameters_update_on = 0;
    caller = 0;
  );

@slider
  caller=1;

@serialize // add this block for tk extra features
  file_var(0, while_playing);
  file_var(0, while_recording);
  file_var(0, while_stopped); file_var(0, zoom_off);
  //file_var(0, LA2Kan_VERSION);
  file_var(0, link_group);
  seriloop = 0;
  loop(64*16 + 27 + 16 +16 +16,
  file_var(0, gmem[seriloop]);
  seriloop += 1;
  );
  seriloop = 0;
  loop(200*16,
  file_var(0, group_generics[seriloop]);
  seriloop += 1;
  );

@sample

  S2_sample_on = 1;

  // extra tk features
  gmem[16*64 + 10 + link_group] != 1 ? link_group = 0;
  group_check_smpl();

  caller == 1 ? (
    parameters_update_on == 0 ? (
      parameters_update();
    );
  );

  // extra tk features
  playstates();
  process = 0;
  while_playing ? is_playing ? process = 1;
  while_recording ? is_recording ? process = 1;
  while_stopped ? is_stopped ? process = 1;
  initialized_playstates=1;

  process==1?(
    // bi2 was the previously transformed buffer, and by the time it
    // is bi2 we only touch the second half (the first was replaced when
    // it was bi1)

    // bi1 is the most recently transformed buffer, we only touch the first
    // half, because the second will be used for the next overlap


    dry0=spl0;
    dry1=spl1;
    wet0=spl0+spl1;

    t=bi1+bufpos;
    p0=t[0];
    t[0]=wet0;

    t=bi2+halfsize+bufpos;
    p1=t[0];
    t[0]=wet0;

    wet0 = p0 + p1; // our mdct handles windowing, so we just add

    bufpos+=1;

    bufpos >= halfsize ? (
      // we hit our FFT size here
      // swap bi1 and bi2
      t=bi1; bi1=bi2; bi2=t;
      // Map time -> frequency domain
      mdct(bi1,fftsize);
      // frequency-shift energy to lower bands
      // memcpy(bi1,bi1+shift,bands);
      i=0;
      loop(bands, bi1[i]=bi1[i*shift+i]; i+=1;);
      // zero out HF bands;
      memset(bi1+bands,0,fftsize-bands);
      imdct(bi1,fftsize);
      bufpos=0;
    );


    spl0 = (dry0 + wet0 * adj) * gain;
    spl1 = (dry1 + wet0 * adj) * gain;

  );


<? // @gfx setup
  w_bg=512;
  h_bg=216;
  mcp_ratio="wide";
  include("DGFX/ddconfig.jsfx-inc");
?>
  tk_gfx_setup();
  gfx_ext_flags == 0 ? (  // full ui
    unscaled_factor=1.35;
    set_background(0);
                                    //mode=0 you manually write your code for handling mouse input; mode=1 automatic handling
    //Knobs                      (slider    default     min      max     step           x            y   frames  scaling   png  mode  reverse) (frames = 0 = auto calculate)   (step=0=default floating numbers as step)   
    kEffect.parameter_config       ( 1,            -6,    -40,      40,     0.1,       125/2,        61/2,     0,     1.2,     2,    1,       0);    
    kCutoff.parameter_config       ( 2,             4,      1,      30,       1,       251/2,        75/2,     0,     1.5,     3,    1,       0);    
    kShift.parameter_config        ( 4,             1,      0,      10,       1,       251/2,       122/2,     0,     1.5,     3,    1,       0);    
    kGain.parameter_config         ( 3,             0,    -40,      40,     0.1,       305/2,        61/2,     0,     1.2,     2,    1,       0);    
    //gfx_r=0.616;gfx_g=0.569;gfx_b=0.141;
    gfx_r=0.4;gfx_g=gfx_b=0.01;
    gfx_a=0.6;
    kCutoff.attached_label("CUT",2, "Verdana",7,'b');
    kShift.attached_label("SHIFT",2, "Verdana",7,'b');
    kEffect.attached_label("EFFECT",-2, "Verdana",10,'b');
    kGain.attached_label("GAIN",-2, "Verdana",10,'b');

    setup_dmenu("Stillwell Thunderkick", "1", "Analog Obsession, Tukan Studios, Pitufodelbosque, ReArtist", 0.2); // setup menu, arguments: jsfx name, version, graphics, zoom

    mouse_wheel=0;
  ):gfx_ext_flags == 1 ? ( // embedded mcp ui
    set_background(1,0.173,0,0);
    kEffect.parameter_config      ( 1,            -6,    -40,      40,     0.1,       20/2,        57/2,     0,       1.2,     2,    1,       0);    
    kGain.parameter_config        ( 3,             0,    -40,      40,     0.1,      165/2,        57/2,     0,       1.2,     2,    1,       0);   
    kCutoff.parameter_config      ( 2,             4,      1,      30,       1,      127/2,        75/2,     0,       2.8,     3,    1,       0);    
    kShift.parameter_config       ( 4,             1,      0,      10,       1,      127/2,       122/2,     0,       2.8,     3,    1,       0);    

    gfx_r=0.2;gfx_g=gfx_b=0.01;
    gfx_a=0.9;
    kEffect.attached_label("  EFFECT",-3, "Verdana",18,'b');
    kGain.attached_label("  GAIN",-3, "Verdana",18,'b');
    mouse_wheel=0;
  );
  
  // update parameters
  S2_sample_on == 0 ? (
  gmem[16*64 + 10 + link_group] != 1 ? link_group = 0; // tk extra features
  group_check_smpl(); // tk extra features
    caller == 1 ? (
        parameters_update_on == 0 ? (
          parameters_update();
        );
    );
  );
  S2_sample_on = 0;

