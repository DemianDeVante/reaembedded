desc: EQ1979 (DD)
// Author: Belles Ondes
// version: 0.96
// Info&Manual: http://www.bellesondes.fr/wiki/doku.php?id=eq1979
// GUI by Fluidshell: http://www.fluidshell.com/

slider1:gain_db=0<-24,24,1>-Trim Gain (dB)
slider2:c_hpf_gain=0<-16,16,0.1>-High frequency shelf Gain (dB)
slider3:c_mpf_gain=0<-18,18,0.1>-Mid frequency shelf gain (dB)
slider4:mpf_cut=0<0,6,1{Off,0.36kHz,0.7kHz,1.6kHz,3.2kHz,4.8kHz,7.2kHz}>-Mid frequency (Hz)
slider5:c_lpf_gain=0<-16,16,0.1>-Low frequency gain (dB)
slider6:lpf_cut=0<0,4,1{Off,35Hz,60Hz,110Hz,220Hz}>-Low frequency shelf (Hz)
slider7:hpf_cut=0<0,4,1{Off,50Hz,80Hz,160Hz,300Hz}>-Input Highpass frequency (Hz)
slider8:sat_amount=0<0,100,0.1>-Saturation Amount (%)
slider9:eq_enable=1<0,1,1>-Eq enable (On/Off)
slider10:phase_enable=0<0,1,1>-Inver phase (On/Off)
 
filename:0,DGFX/1979/bg.png
filename:1,DGFX/1979/button-bypass.png
filename:2,DGFX/1979/button-phase.png
filename:3,DGFX/1979/knob-drive.png
filename:4,DGFX/1979/knob-trim.png
filename:5,DGFX/1979/knob-eqhpf.png
filename:6,DGFX/1979/knob-eqlow.png
filename:7,DGFX/1979/knob-eqmid.png
filename:8,DGFX/1979/knob-gainhigh.png
filename:9,DGFX/1979/knob-gainlow.png
filename:10,DGFX/1979/knob-gainmid.png
filename:11,DGFX/1979/bgmcp.png

// import tukan library
import DGFX/tk_lib_d.jsfx-inc 
options:no_meter
// write a cool name to store jsfx memory below
options:gmem=eq1979D    

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

options: no_meter

@init
  gfx_ext_retina = 1;
  gfx_clear=0;
  lastCap=1;
  mouse_wheel=1;
  Number_input = 0;
  number_input_invalid = 0;
  number_input_x = 0;
  number_input_y=0;
  //ext_noinit=1; // caused issues with oversampling

  // tk extra features
  lastCap=1;
  mouse_wheel=1;
  //is_recording = 0; is_playing = 0; is_stopped = 1;
  !initialized_playstates?(while_playing = 1; while_recording = 1; while_stopped = 1);
  Number_input = 0;
  number_input_raw = 0;
  number_input_use = 0;
  komma = 0;
  in_key = 0;
  number_input_x = 0;
  number_input_y=0;
  number_input_slider = 0;
  number_input_min=0;
  number_input_max=0;
  number_input_invalid = 0;
  number_input_sign=1;
  s2_numbers_of_sliders = 10; // set the number of sliders for gorup linking
  s2_numbers_of_generics = 0;
  group_generics = 0; // fuer group_generics[bis zu 200] <-- ?
  sliders_old = group_generics + 16*200;
  generics_old = sliders_old + 16*64;

  mouse_sensivity();

  last_gain = 10^(gain_db/20);
  slick_gui=1; // Legacy - Change to 0 to switch back to Beta gfx-based GUI

  // Miscelaneous Inits
  pi=3.141592;
  e=2.71828;
  bgcolor=104+127*256+150*65536; //That cute vintage blue
  protec=0; //mouse protection, 0 = Available
  bias=0.0021;
  noisefloor=0.00000321;

  // Filtered parameters inits
  // High Shelf Smoothing
  fparam=10;
  hpf_gain=c_hpf_gain;
  mpf_gain=c_mpf_gain;
  lpf_gain=c_lpf_gain;

  // =============================================
  // LOP - Copyright (c) - 2014 - Olivier Belanger
  // =============================================
  function lop(freq)
  (
    this.y0 = 0;
    this.ny = srate * 0.49;
    freq < 0.1 ? freq = 0.1 : freq > this.ny ? freq = this.ny;
    this.freq = freq; 
    this.c = exp(-2 * $pi * this.freq / srate);
  );

  function lop_set_freq(freq)
  (
    freq < 0.1 ? freq = 0.1 : freq > this.ny ? freq = this.ny;
    this.freq = freq; 
    this.c = exp(-2 * $pi * this.freq / srate);
  );

  function lop_do(signal)
  (
    this.y0 = signal + (this.y0 - signal) * this.c;
    this.y0;
  );

  // =============================================
  // HIP - Copyright (c) - 2014 - Olivier Belanger
  // =============================================
  function _hip_compute_coeffs()
  (
  this.b1 = exp(-2 * $pi * this.freq / srate);
  this.a0 = (1 + this.b1) / 2;
  this.a1 = -this.a0;
  );

  function hip(freq)
  (
  this.x0 = this.y0 = 0;
  this.ny = srate * 0.49;
  freq < 0.1 ? freq = 0.1 : freq > this.ny ? freq = this.ny;
  this.freq = freq;
  this._hip_compute_coeffs();
  );

  function hip_set_freq(freq)
  (
  freq < 0.1 ? freq = 0.1 : freq > this.ny ? freq = this.ny;
  this.freq = freq;
  this._hip_compute_coeffs();
  );

  function hip_do(signal)
  (
  this.y0 = signal * this.a0 + this.x0 * this.a1 + this.y0 * this.b1;
  this.x0 = signal;
  this.y0;
  );

  // ================================================
  // BUT_LP - Copyright (c) - 2014 - Olivier Belanger
  // ================================================
  function _butlp_compute_coeffs(freq)
  (
  freq < 1.0 ? freq = 1.0 : freq > this.ny ? freq = this.ny;
  this.freq = freq;
  c_ = 1.0 / tan(this.pioversr * this.freq);
  c2_ = c_ * c_;
  this.a0 = this.a2 = 1.0 / (1.0 + this.sqrt2 * c_ + c2_);
  this.a1 = 2.0 * this.a0;
  this.b1 = this.a1 * (1.0 - c2_);
  this.b2 = this.a0 * (1.0 - this.sqrt2 * c_ + c2_);
  );

  function butlp(freq)
  (
  this.x1 = this.x2 = this.y1 = this.y2 = 0.0;
  this.pioversr = $pi / srate;
  this.sqrt2 = sqrt(2.0);
  this.ny = srate * 0.49;
  this._butlp_compute_coeffs(freq);
  );

  function butlp_set_freq(freq)
  (
  this._butlp_compute_coeffs(freq);
  );

  function butlp_do(signal)
  (
  tmp_ = this.a0 * signal + this.a1 * this.x1 + this.a2 * this.x2 - this.b1 * this.y1 - this.b2 * this.y2;
  this.x2 = this.x1; this.x1 = signal; this.y2 = this.y1; this.y1 = tmp_;
  tmp_;
  );

  // ================================================
  // BUT_HP - Copyright (c) - 2014 - Olivier Belanger
  // ================================================
  function _buthp_compute_coeffs(freq)
  (
  freq < 1.0 ? freq = 1.0 : freq > this.ny ? freq = this.ny;
  this.freq = freq;
  c_ = tan(this.pioversr * this.freq);
  c2_ = c_ * c_;
  this.a0 = this.a2 = 1.0 / (1.0 + this.sqrt2 * c_ + c2_);
  this.a1 = -2.0 * this.a0;
  this.b1 = 2.0 * this.a0 * (c2_ - 1.0);
  this.b2 = this.a0 * (1.0 - this.sqrt2 * c_ + c2_);
  );
  
  function buthp(freq)
  (
  this.x1 = this.x2 = this.y1 = this.y2 = 0.0;
  this.pioversr = $pi / srate;
  this.sqrt2 = sqrt(2.0);
  this.ny = srate * 0.49;
  this._buthp_compute_coeffs(freq);
  );
  
  function buthp_set_freq(freq)
  (
  this._buthp_compute_coeffs(freq);
  );
  
  function buthp_do(signal)
  (
  tmp_ = this.a0 * signal + this.a1 * this.x1 + this.a2 * this.x2 - this.b1 * this.y1 - this.b2 * this.y2;
  this.x2 = this.x1; this.x1 = signal; this.y2 = this.y1; this.y1 = tmp_;
  tmp_;
  );
  
  // ================================================
  // EQ - Copyright (c) - 2014 - Olivier Belanger
  // ================================================
  function _eq_compute_peak_coeffs()
  (
  amul_ = this.alpha * this.a;
  adiv_ = this.alpha / this.a;
  this.b0 = 1.0 + amul_;
  this.b1 = this.a1 = -2.0 * this.c;
  this.b2 = 1.0 - amul_;
  this.a0 = 1 + adiv_;
  this.a2 = 1 - adiv_;
  );
  
  function _eq_compute_ls_coeffs()
  (
  sqrt2a_ = sqrt(this.a * 2.0) * this.alpha;
  amin1c_ = (this.a - 1.0) * this.c;
  aadd1c_ = (this.a + 1.0) * this.c;
  this.b0 = this.a * ((this.a + 1.0) - amin1c_ + sqrt2a_);
  this.b1 = 2.0 * this.a * ((this.a - 1.0) - aadd1c_);
  this.b2 = this.a * ((this.a + 1.0) - amin1c_ - sqrt2a_);
  this.a0 = (this.a + 1.0) + amin1c_ + sqrt2a_;
  this.a1 = -2.0 * ((this.a - 1.0) + aadd1c_);
  this.a2 = (this.a + 1.0) + amin1c_ - sqrt2a_;
  );
  
  function _eq_compute_hs_coeffs()
  (
  sqrt2a_ = sqrt(this.a * 2.0) * this.alpha;
  amin1c_ = (this.a - 1.0) * this.c;
  aadd1c_ = (this.a + 1.0) * this.c;
  this.b0 = this.a * ((this.a + 1.0) + amin1c_ + sqrt2a_);
  this.b1 = -2.0 * this.a * ((this.a - 1.0) + aadd1c_);
  this.b2 = this.a * ((this.a + 1.0) + amin1c_ - sqrt2a_);
  this.a0 = (this.a + 1.0) - amin1c_ + sqrt2a_;
  this.a1 = 2.0 * ((this.a - 1.0) - aadd1c_);
  this.a2 = (this.a + 1.0) - amin1c_ - sqrt2a_;
  );
  
  function _eq_compute_vars(freq q boost)
  (
  freq <= 1 ? freq = 1 : freq > this.ny ? freq = this.ny;
  this.freq = freq;
  q < 0.1 ? q = 0.1;
  this.q = q;
  this.boost = boost;
  this.a = pow(10, boost/40);
  w0 = this.twopi * this.freq / srate;
  this.c = cos(w0);
  this.alpha = sin(w0) / (2 * this.q);
  this.type == 0 ? this._eq_compute_peak_coeffs() :
  this.type == 1 ? this._eq_compute_ls_coeffs() :
  this.type == 2 ? this._eq_compute_hs_coeffs();
  );
  
  function eq(freq q boost type)
  (
  this.x1 = this.x2 = this.y1 = this.y2 = 0.0;
  this.twopi = $pi * 2;
  this.ny = srate * 0.49;
  type < 0 ? type = 0 : type > 2 ? type = 2;
  this.type = type;
  this._eq_compute_vars(freq, q, boost);
  );
  
  function eq_set_freq(freq)
  (
  freq != this.freq ? this._eq_compute_vars(freq, this.q, this.boost);
  );
  
  function eq_set_q(q)
  (
  q != this.q ? this._eq_compute_vars(this.freq, q, this.boost);
  );
  
  function eq_set_boost(boost)
  (
  boost != this.boost ? this._eq_compute_vars(this.freq, this.q, boost);
  );
  
  function eq_set_type(type)
  (
  type != this.type ? (
  type < 0 ? type = 0 : type > 2 ? type = 2;
  this.type = type;
  this._eq_compute_vars(this.freq, this.q, this.boost);
  );
  );
  
  function eq_do(signal)
  (
  tmp_ = (this.b0 * signal + this.b1 * this.x1 + this.b2 * this.x2 - this.a1 * this.y1 - this.a2 * this.y2) / this.a0;
  this.x2 = this.x1; this.x1 = signal; this.y2 = this.y1; this.y1 = tmp_;
  tmp_;
  );
  
  // EQ1979 Filters Inits Section
  //====================================================
  // Frequency response hardware emulation
  //====================================================
  // Input HPF Hardware Emulation Filter
  f_in_1.hip(11);
  f_in_2.hip(11);
  f_in_3.hip(5);
  f_in_4.hip(5);
  // Input Sharp LF highpass Filter
  f_SLF_1.buthp(50);
  f_SLF_2.buthp(50);
  f_SLF_3.buthp(50);
  f_SLF_4.buthp(50);
  f_SLF_5.eq(50,0.5,0,0);
  f_SLF_6.eq(50,0.5,0,0);
  f_SLF_7.eq(50,0.5,0,0);
  f_SLF_8.eq(50,0.5,0,0);
  // Output Hardware Sharp high freqency lowpass Filter
  f_HLF_1.butlp(20843);
  f_HLF_2.butlp(20843);
  f_HLF_3.butlp(20843);
  f_HLF_4.butlp(20843);
  // Emulation of the static mid bump
  f_bump_1.eq(850, 0.5,.38,0);
  f_bump_2.eq(850, 0.5,.38,0);
  // Emulation of the static smooth HF drop
  f_drop_1.eq(18300, 0.3,-0.8,0);
  f_drop_2.eq(18300, 0.3,-0.8,0);
  
  //====================================================
  // High Shelf
  //====================================================
  // Datasheet : 12k Shelving at +-16dB
  f_HF_1.eq(2000, 0.35, hpf_gain, 2);
  f_HF_2.eq(2000, 0.35, hpf_gain, 2);
  // Emulation of the eq counter mid bump
  f_HF_bump_1.eq(820, 0.45,-2,0);
  f_HF_bump_2.eq(820, 0.45,-2,0);
  
  //====================================================
  // Mid Peak filter
  //====================================================
  // Emulation of the eq counter mid bump
  f_MF_bump_1.eq(380, 0.25,1,0);
  f_MF_bump_2.eq(380, 0.25,1,0);
  // Main MID Filter peak
  f_MF_1.eq(380, 0.5,0,0);
  f_MF_2.eq(380, 0.5,0,0);
  
  //====================================================
  // Low Peak filter
  //====================================================
  // Emulation of the natural filter low bump when activated
  f_LF_bump_1.eq(80, 0.25,0.5,0);
  f_LF_bump_2.eq(80, 0.25,0.5,0);
  // Emulation of the natural filter low drop when activated
  f_LF_drop_1.eq(240, 0.5,-0.5,0);
  f_LF_drop_2.eq(240, 0.5,-0.5,0);
  // Main Low Filter peak
  f_LF_1.eq(80, 0.5,0,0);
  f_LF_2.eq(80, 0.5,0,0);
  
  //====================================================
  // Parameters filters
  //====================================================
  // lpf filtering of parameters that can be externally modulated
  f_pHF.lop(fparam); 
  f_pMF.lop(fparam); 
  f_pLF.lop(fparam); 
  
  //========================================================
  // Functions called to update filters on parameter changes
  //========================================================
  function gain_update() (
  next_gain=10^(gain_db/20);
  );
  
  function sat_update() (
  sat_S=10*exp((2*(sat_amount/10)-20)/e);
  atan_S=atan(sat_S);
  sat_trim=(1-0.5*atan_S);
  //sat_trim=0.83333+0.166666*cos(pi*sat_S/10);
  );
  
  function hpf_update() (
  hpf_cut==1 ? (f_hpf_cut=34;f_hpf_b1=46;f_hpf_g1=1.1;f_hpf_q1=1.6;f_hpf_b2=78;f_hpf_g2=-0.3;f_hpf_q2=0.7;);
  hpf_cut==2 ? (f_hpf_cut=64;f_hpf_b1=76;f_hpf_g1=2.4;f_hpf_q1=1.2;f_hpf_b2=110;f_hpf_g2=-1.6;f_hpf_q2=0.7;);
  hpf_cut==3 ? (f_hpf_cut=132;f_hpf_b1=160;f_hpf_g1=2.2;f_hpf_q1=1.9;f_hpf_b2=302;f_hpf_g2=-0.5;f_hpf_q2=1;);
  hpf_cut==4 ? (f_hpf_cut=270;f_hpf_b1=330;f_hpf_g1=2.4;f_hpf_q1=1.6;f_hpf_b2=665;f_hpf_g2=-0.4;f_hpf_q2=0.7;);
  
  f_SLF_1.buthp(f_hpf_cut);
  f_SLF_2.buthp(f_hpf_cut);
  f_SLF_3.buthp(f_hpf_cut);
  f_SLF_4.buthp(f_hpf_cut);
  f_SLF_5.eq_set_freq(f_hpf_b1);
  f_SLF_6.eq_set_freq(f_hpf_b1);
  f_SLF_7.eq_set_freq(f_hpf_b2);
  f_SLF_8.eq_set_freq(f_hpf_b2);
  f_SLF_5.eq_set_q(f_hpf_q1);
  f_SLF_6.eq_set_q(f_hpf_q1);
  f_SLF_7.eq_set_q(f_hpf_q2);
  f_SLF_8.eq_set_q(f_hpf_q2);
  f_SLF_5.eq_set_boost(f_hpf_g1);
  f_SLF_6.eq_set_boost(f_hpf_g1);
  f_SLF_7.eq_set_boost(f_hpf_g2);
  f_SLF_8.eq_set_boost(f_hpf_g2);
  );
  
  function HF_update() (
  f_HF_1.eq_set_boost(hpf_gain);
  f_HF_2.eq_set_boost(hpf_gain);
  f_HF_bump_1.eq_set_boost(hpf_gain*-3.5/18);
  f_HF_bump_2.eq_set_boost(hpf_gain*-3.5/18);
  );
  
  function MF_update() (
  mpf_cut==1 ? f_mpf_cut=380;
  mpf_cut==2 ? f_mpf_cut=700;
  mpf_cut==3 ? f_mpf_cut=1600;
  mpf_cut==4 ? f_mpf_cut=3200;
  mpf_cut==5 ? f_mpf_cut=6800;
  mpf_cut==6 ? f_mpf_cut=12200;
  f_MF_bump_1.eq_set_freq(f_mpf_cut);
  f_MF_bump_2.eq_set_freq(f_mpf_cut);
  // Mid Main filter cut frequency
  mpf_cut==1 ? f_mpf_main=358;
  mpf_cut==2 ? f_mpf_main=750;
  mpf_cut==3 ? f_mpf_main=1590;
  mpf_cut==4 ? f_mpf_main=3200;
  mpf_cut==5 ? f_mpf_main=5800-600*abs(mpf_gain)/18;//5200
  mpf_cut==6 ? f_mpf_main=9400-2130*abs(mpf_gain)/18;//7270
  f_MF_1.eq_set_freq(f_mpf_main);
  f_MF_2.eq_set_freq(f_mpf_main);
  // Mid Main filter Q
  mpf_cut==1 ? f_mpf_q=0.22+abs(mpf_gain/60);
  mpf_cut==2 ? f_mpf_q=0.22+abs(mpf_gain/55);
  mpf_cut==3 ? f_mpf_q=0.22+abs(mpf_gain/60);
  mpf_cut==4 ? f_mpf_q=0.22+abs(mpf_gain/72);
  mpf_cut==5 ? f_mpf_q=0.22+abs(mpf_gain/35);
  mpf_cut==6 ? f_mpf_q=0.22+abs(mpf_gain/32);
  f_MF_1.eq_set_q(f_mpf_q);
  f_MF_2.eq_set_q(f_mpf_q);
  // Boost
  f_MF_1.eq_set_boost(mpf_gain);
  f_MF_2.eq_set_boost(mpf_gain);
  );
  
  function LF_update() (
  // Bump Freq
  lpf_cut==1 ? f_lpf_cut=35;
  lpf_cut==2 ? f_lpf_cut=80;
  lpf_cut==3 ? f_lpf_cut=130;
  lpf_cut==4 ? f_lpf_cut=240;
  f_LF_bump_1.eq_set_freq(f_lpf_cut);
  f_LF_bump_2.eq_set_freq(f_lpf_cut);
  f_LF_bump_1.eq_set_boost(0.5+lpf_cut/8);
  f_LF_bump_2.eq_set_boost(0.5+lpf_cut/8);
  // Drop Freq
  lpf_cut==1 ? f_lpf_cut=240;
  lpf_cut==2 ? f_lpf_cut=420;
  lpf_cut==3 ? f_lpf_cut=540;
  lpf_cut==4 ? f_lpf_cut=1000;
  f_LF_drop_1.eq_set_freq(f_lpf_cut+abs(lpf_gain*5));
  f_LF_drop_2.eq_set_freq(f_lpf_cut+abs(lpf_gain*5));
  f_LF_drop_1.eq_set_boost(-0.5-lpf_cut/11-lpf_gain/(2.6+2/lpf_cut));
  f_LF_drop_2.eq_set_boost(-0.5-lpf_cut/11-lpf_gain/(2.6+2/lpf_cut));
  // LOW Main filter cut frequency
  lpf_cut==1 ? f_lpf_main=30;
  lpf_cut==2 ? f_lpf_main=32;
  lpf_cut==3 ? f_lpf_main=50;
  lpf_cut==4 ? f_lpf_main=80;
  f_LF_1.eq_set_freq(f_lpf_main);
  f_LF_2.eq_set_freq(f_lpf_main);
  // LOW Main filter Q
  lpf_cut==1 ? f_lpf_q=0.22;
  lpf_cut==2 ? f_lpf_q=0.12;
  lpf_cut==3 ? f_lpf_q=0.12;
  lpf_cut==4 ? f_lpf_q=0.12;
  f_LF_1.eq_set_q(f_lpf_q);
  f_LF_2.eq_set_q(f_lpf_q);
  // Boost
  f_LF_1.eq_set_boost(lpf_gain);
  f_LF_2.eq_set_boost(lpf_gain);
  );

  function parameters_update() (
    parameters_update_on = 1;
    group_parameters(); // tk extra features
    // Paste all contents of @slider here
      //====================================================
      // Gain and Saturation Amount (Red Knob)
      //====================================================
      // Gain Trim
      gain_update();
      // Saturation parameters - https://www.desmos.com/calculator/hmaieq6af3
      sat_update();
      //====================================================
      // Input Sharp filter (Blue Knob)
      //====================================================
      hpf_update();
      //====================================================
      // High Shelf (#1 Grey Knob)
      //====================================================
      HF_update();
      //====================================================
      // Mid Peak filter (#2 Grey Knob)
      //====================================================
      MF_update();
      //====================================================
      // Low Peak filter (#3 Grey Knob)
      //====================================================
      LF_update();
    parameters_update_on = 0;
    caller = 0;
  );

@slider
  caller=1;


@serialize // add this block for tk extra features
  file_var(0, while_playing);
  file_var(0, while_recording);
  file_var(0, while_stopped); file_var(0, zoom_off);
  //file_var(0, LA2Kan_VERSION);
  file_var(0, link_group);
  seriloop = 0;
  loop(64*16 + 27 + 16,
  file_var(0, gmem[seriloop]);
  seriloop += 1;
  );
  seriloop = 0;
  loop(200*16,
  file_var(0, group_generics[seriloop]);
  seriloop += 1;
  );

@block
  d_gain = (next_gain - last_gain)/samplesblock;

@sample

  S2_sample_on = 1;
  initialized_playstates=1;
  // extra tk features
  gmem[16*64 + 10 + link_group] != 1 ? link_group = 0;
  group_check_smpl();

  caller == 1 ? (
    parameters_update_on == 0 ? (
      parameters_update();
    );
  );

  // extra tk features
  playstates();
  process = 0;
  while_playing ? is_playing ? process = 1;
  while_recording ? is_recording ? process = 1;
  while_stopped ? is_stopped ? process = 1;

  process == 1 ? ( 
    // High Shelf Smoothing
    HF_update();
    MF_update();
    LF_update();
    hpf_gain = f_pHF.lop_do(c_hpf_gain);
    mpf_gain = f_pMF.lop_do(c_mpf_gain);
    lpf_gain = f_pLF.lop_do(c_lpf_gain);

    // Input HPF Hardware Emulation Filter
    spl0 = f_in_1.hip_do(spl0);
    spl1 = f_in_2.hip_do(spl1);

    // Phase
    phase_enable ? (
    spl0 *= -1;
    spl1 *= -1;
    );

    // Asymetry
    spl0 += (1-((spl0)^2)/(1+(spl0)^2))*bias*sat_S/10;
    spl1 += (1-((spl1)^2)/(1+(spl1)^2))*bias*sat_S/10;

    // noise
    spl0 += noisefloor*rand();
    spl1 += noisefloor*rand();
    
    // Saturation
    sat_amount ? (
    spl0 = sat_trim*atan(spl0*sat_S)/atan_S;
    spl1 = sat_trim*atan(spl1*sat_S)/atan_S;
    );

    // Gain Trimming
    spl0 *= last_gain;
    spl1 *= last_gain;
    last_gain += d_gain;

    // Input HPF Hardware Emulation Filter
    spl0 = f_in_3.hip_do(spl0);
    spl1 = f_in_4.hip_do(spl1);

    eq_enable ? ( 
    // Input Sharp LF Filter
    hpf_cut ? (
    spl0 = f_SLF_1.buthp_do(spl0);
    spl0 = f_SLF_3.buthp_do(spl0);
    spl1 = f_SLF_2.buthp_do(spl1);
    spl1 = f_SLF_4.buthp_do(spl1);
    spl0 = f_SLF_5.eq_do(spl0);
    spl1 = f_SLF_6.eq_do(spl1);
    spl0 = f_SLF_7.eq_do(spl0);
    spl1 = f_SLF_8.eq_do(spl1);
    );
    
    // Mid bump HW emulation
    spl0 = f_bump_1.eq_do(spl0);
    spl1 = f_bump_2.eq_do(spl1);
    
    // HF drop HW emulation
    spl0 = f_drop_1.eq_do(spl0);
    spl1 = f_drop_2.eq_do(spl1);
    
    // High Pass Shelf
    spl0 = f_HF_1.eq_do(spl0);
    spl1 = f_HF_2.eq_do(spl1);
    // Mid bump HW emulation
    spl0 = f_HF_bump_1.eq_do(spl0);
    spl1 = f_HF_bump_2.eq_do(spl1);
    
    // Mid Filter
    // Mid bump HW emulation
    mpf_cut ? (
    spl0 = f_MF_bump_1.eq_do(spl0);
    spl1 = f_MF_bump_2.eq_do(spl1);
    spl0 = f_MF_1.eq_do(spl0);
    spl1 = f_MF_2.eq_do(spl1);
    );
    
    // Low Filter
    lpf_cut ? (
    spl0 = f_LF_bump_1.eq_do(spl0);
    spl1 = f_LF_bump_2.eq_do(spl1);
    spl0 = f_LF_drop_1.eq_do(spl0);
    spl1 = f_LF_drop_2.eq_do(spl1);
    spl0 = f_LF_1.eq_do(spl0);
    spl1 = f_LF_2.eq_do(spl1);
    );

    );
    //Output LPF 
    spl0 = f_HLF_1.butlp_do(spl0);
    spl0 = f_HLF_3.butlp_do(spl0);
    spl1 = f_HLF_2.butlp_do(spl1);
    spl1 = f_HLF_4.butlp_do(spl1);
  );
  
<? // @gfx setup
  w_bg=840;
  h_bg=188;
  mcp_ratio="tall";
  include("DGFX/ddconfig.jsfx-inc");
?>
  tk_gfx_setup();

  gfx_ext_flags == 0 ? (  // full ui
    set_background(0);
                                    //mode=0 you manually write your code for handling mouse input; mode=1 automatic handling
    //Knobs                     (slider    default     min      max  step         x          y   frames  scaling   png  mode  reverse) (frames = 0 = auto calculate)   (step=0=default floating numbers as step)   
    kTrim.parameter_config       ( 1,             0,    -24,      24,    1,      66/2,     161/2,    49,       1,     4,    1,       0);    
    kHFGain.parameter_config     ( 2,             0,    -16,      16,  0.1,     210/2,      58/2,     0,       1,     8,    1,       0);    
    kMFGain.parameter_config     ( 3,             0,    -18,      18,  0.1,     364/2,      58/2,     0,       1,    10,    1,       0);    
    kLFGain.parameter_config     ( 5,             0,    -16,      16,  0.1,     519/2,      58/2,     0,       1,     9,    1,       0);    
    kMFreq.parameter_config      ( 4,             0,      0,       6,    1,     374/2,     161/2,     7,       1,     7,    1,       3);    
    kLFreq.parameter_config      ( 6,             0,      0,       4,    1,     528/2,     161/2,     5,       1,     6,    1,       3);    
    kHPass.parameter_config      ( 7,             0,      0,       4,    1,     657/2,      41/2,     5,       1,     5,    1,       3);    
    kDrive.parameter_config      ( 8,             0,      0,     100,  0.1,      44/2,      46/2,   127,       1,     3,    1,       0);   
 
    //Buttons                    (slider     orient  off_val   on_val     x        y           scaling   png  mode) (orient = 0 = horizontal image; orient = 1 = vertical image)
    bEqToggle.button_config      ( 9,             1,      0,       1,  777/2,    67/2,              1.1,     1,    1);
    bPhToggle.button_config      (10,             1,      0,       1,  778/2,    98/2,              1.1,     2,    1);
    setup_dmenu("Belles Ondes 1979 EQ", "1", "Fluidshell", 0.3); // setup menu, arguments: jsfx name, version, graphics, zoom

    mouse_wheel=0;
  ):gfx_ext_flags == 1 ? ( // embedded mcp ui
    set_background(11,0.086,0.125,0.137);
                                    //mode=0 you manually write your code for handling mouse input; mode=1 automatic handling
    //Knobs                     (slider    default     min      max  step         x          y   frames  scaling   png  mode  reverse) (frames = 0 = auto calculate)   (step=0=default floating numbers as step)   
    kTrim.parameter_config       ( 1,             0,    -24,      24,    1,     229/2,      23/2,    49,       2,     4,    1,       0);    
    kHFGain.parameter_config     ( 2,             0,    -16,      16,  0.1,      65/2,      58/2,     0,       1,     8,    1,       0);    
    kMFGain.parameter_config     ( 3,             0,    -18,      18,  0.1,      65/2,     215/2,     0,       1,    10,    1,       0);    
    kLFGain.parameter_config     ( 5,             0,    -16,      16,  0.1,      65/2,     370/2,     0,       1,     9,    1,       0);    
    kMFreq.parameter_config      ( 4,             0,      0,       6,    1,     229/2,      65/2,     7,       2,     7,    1,       3);    
    kLFreq.parameter_config      ( 6,             0,      0,       4,    1,     229/2,     105/2,     5,       2,     6,    1,       3);    
    kHPass.parameter_config      ( 7,             0,      0,       4,    1,     236/2,     170/2,     5,       1,     5,    1,       3);    
    kDrive.parameter_config      ( 8,             0,      0,     100,  0.1,     234/2,     355/2,   127,       1,     3,    1,       0);   
 
    //Buttons                    (slider     orient  off_val   on_val     x        y           scaling   png  mode) (orient = 0 = horizontal image; orient = 1 = vertical image)
    bEqToggle.button_config      ( 9,             1,      0,       1, 185/2,   160/2,              1.1,     1,    1);
    bPhToggle.button_config      (10,             1,      0,       1, 183/2,   310/2,              1.1,     2,    1);

    mouse_wheel=0;
  );
  
  // update parameters
  S2_sample_on == 0 ? (
  gmem[16*64 + 10 + link_group] != 1 ? link_group = 0; // tk extra features
  group_check_gfx(); // tk extra features
    caller == 1 ? (
        parameters_update_on == 0 ? (
          parameters_update();
        );
    );
  );
  S2_sample_on = 0;
