// Copyright 2006, Thomas Scott Stillwell
// All rights reserved.
//
//Redistribution and use in source and binary forms, with or without modification, are permitted 
//provided that the following conditions are met:
//
//Redistributions of source code must retain the above copyright notice, this list of conditions 
//and the following disclaimer. 
//
//Redistributions in binary form must reproduce the above copyright notice, this list of conditions 
//and the following disclaimer in the documentation and/or other materials provided with the distribution. 
//
//The name of Thomas Scott Stillwell may not be used to endorse or 
//promote products derived from this software without specific prior written permission. 
//
//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
//IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND 
//FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS 
//BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
//(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
//PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
//STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
//THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

desc:RBJ 1073 EQ (DD)
//tags: equalizer filter
//author: Stillwell

slider1:0<0,4,1{Off,50,80,160,300}>-HPF
slider2:0<0,4,1{Off,35,60,110,220}>-Low Shelf (Hz)
slider3:0<-20,20,0.1>-Low Boost/Cut (dB)
slider4:0<0,5,1{360,700,1.6k,3.2k,4.8k,7.2k}>-Mid Freq (Hz)
slider5:0<-20,20,0.1>-Mid Boost/Cut (dB)
slider6:0<-20,20,0.1>-High Shelf (12k) Boost/Cut (dB)
slider7:0<-20,20,0.1>-Gain (dB)

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

filename:0,DGFX/rbj1073/bg.png
filename:1,DGFX/rbj1073/knob-hpf.png
filename:2,DGFX/rbj1073/knob-lf.png
filename:3,DGFX/rbj1073/knob-mf.png
filename:4,DGFX/rbj1073/knob-boost.png
filename:5,DGFX/rbj1073/knob-gain.png
filename:6,DGFX/rbj1073/bgmcp.png

import DGFX/tk_lib_d.jsfx-inc 
// vu meter library, skip this line if not using a meter
//import DGFX/tk-vu_lib_d.jsfx-inc

options:no_meter
options:gfx_hz=60
// write a cool name to store jsfx memory below
options:gmem=rbj1073D  

@init
  THISJSFX_VERSION = 1;
  gfx_ext_retina = 1;
  gfx_clear=0;
  lastCap=1;
  mouse_wheel=1;
  Number_input = 0;
  number_input_invalid = 0;
  number_input_x = 0;
  number_input_y=0;
  ext_noinit=1;
  // tk extra features
  lastCap=1;
  mouse_wheel=1;
  is_recording = 0; is_playing = 0; is_stopped = 1;
  while_playing = 1; while_recording = 1; while_stopped = 1;
  Number_input = 0;
  number_input_raw = 0;
  number_input_use = 0;
  komma = 0;
  in_key = 0;
  number_input_x = 0;
  number_input_y=0;
  number_input_slider = 0;
  number_input_min=0;
  number_input_max=0;
  number_input_invalid = 0;
  number_input_sign=1;
  s2_numbers_of_sliders = 7; // set the number of sliders for gorup linking
  s2_numbers_of_generics = 0;
  group_generics = 0; // fuer group_generics[bis zu 200] <-- ?
  sliders_old = group_generics + 16*200;
  generics_old = sliders_old + 16*64;
  mouse_sensivity();

  ext_tail_size = -1;
  hpf = 0;
  gain1 = 0;
  freq1 = 50;
  a1 = 1;
  s1 = 1;
  q1 = 1 / (sqrt((a1 + 1/a1)*(1/s1 - 1) + 2));
  w01 = 2 * $pi * freq1/srate;
  cosw01 = cos(w01);
  sinw01 = sin(w01);
  alpha1 = sinw01 / (2 * q1);

  b01 = (1 + cosw01)/2;
  b11 = -(1 + cosw01);
  b21 = (1 + cosw01)/2;
  a01 = 1 + alpha1;
  a11 = -2 * cosw01;
  a21 = 1 - alpha1;
  b01 /= a01;
  b11 /= a01;
  b21 /= a01;
  a11 /= a01;
  a21 /= a01;

  lshelf = 0;
  gain3 = 0;
  freq3 = 35;
  a3 = 10^(gain3/40);
  s3 = 2;
  q3 = 1 / (sqrt((a3 + 1/a3)*(1/s3 - 1) + 2));
  w03 = 2 * $pi * freq3/srate;
  cosw03 = cos(w03);
  sinw03 = sin(w03);
  alpha3 = sinw03 / (2 * q3);

  b03 = a3 * ((a3+1) - (a3-1)*cosw03 + 2*sqrt(a3)*alpha3);
  b13 = 2 * a3 * ((a3-1) - (a3+1)*cosw03);
  b23 = a3 * ((a3+1) - (a3-1)*cosw03 - 2*sqrt(a3)*alpha3);
  a03 = (a3+1) + (a3-1)*cosw03 + 2*sqrt(a3)*alpha3;
  a13 = -2 * ((a3-1) + (a3+1)*cosw03);
  a23 = (a3+1)+(a3-1)*cosw03-2*sqrt(a3)*alpha3;
  b03 /= a03;
  b13 /= a03;
  b23 /= a03;
  a13 /= a03;
  a23 /= a03;

  gain5 = 0;
  freq5 = 360;
  a5 = 10^(gain5/20);
  q5 = 1.4;
  w05 = 2 * $pi * freq5/srate;
  cosw05 = cos(w05);
  sinw05 = sin(w05);
  alpha5 = sinw05 / (2 * q5);

  b05 = 1 + alpha5 * a5;
  b15 = -2 * cosw05;
  b25 = 1 - alpha5 * a5;
  a05 = 1 + alpha5 / a5;
  a15 = -2 * cosw05;
  a25 = 1 - alpha5 / a5;
  b05 /= a05;
  b15 /= a05;
  b25 /= a05;
  a15 /= a05;
  a25 /= a05;

  gain7 = 0;
  freq7 = 12000;
  a7 = 10^(gain7/40);
  s7 = 0.3;
  q7 = 1 / (sqrt((a7 + 1/a7)*(1/s7 - 1) + 2));
  w07 = 2 * $pi * freq7/srate;
  cosw07 = cos(w07);
  sinw07 = sin(w07);
  alpha7 = sinw07 / (2 * q7);

  b07 = a7 * ((a7+1) + (a7-1)*cosw07 + 2*sqrt(a7)*alpha7);
  b17 = -2*a7*((a7-1) + (a7+1)*cosw07);
  b27 = a7*((a7+1) + (a7-1)*cosw07 - 2*sqrt(a7)*alpha7);
  a07 = (a7+1) - (a7-1)*cosw07 + 2*sqrt(a7)*alpha7;
  a17 = 2*((a7-1) - (a7+1)*cosw07);
  a27 = (a7+1)-(a7-1)*cosw07 - 2*sqrt(a7)*alpha7;
  b07 /= a07;
  b17 /= a07;
  b27 /= a07;
  a17 /= a07;
  a27 /= a07;

  gain = 1;

  function parameters_update() (
    parameters_update_on = 1;
    group_parameters(); // tk extra features

    // Paste all contents of @slider here
    freq1 = (slider1 == 0 ? 50 : (slider1 == 1 ? 50 : (slider1 == 2 ? 80 : (slider1 == 3 ? 160 : 300))));
    freq3 = (slider2 == 0 ? 35 : (slider2 == 1 ? 35 : (slider2 == 2 ? 60 : (slider2 == 3 ? 110 : 220))));
    gain3 = slider3;
    freq5 = (slider4 == 0 ? 360 : (slider4 == 1 ? 700 : (slider4 == 2 ? 1600 : (slider4 == 3 ? 3200 : (slider4 == 4 ? 4800 : 7200)))));
    gain5 = slider5;
    gain7 = slider6;

    gain = 10^(slider7/20);

    slider1 == 0 ? hpf = 0 : hpf = 1;
    slider2 == 0 ? lshelf = 0 : lshelf = 1;

    a1 = 1;
    s1 = 1;
    q1 = 1 / (sqrt((a1 + 1/a1)*(1/s1 - 1) + 2));
    w01 = 2 * $pi * freq1/srate;
    cosw01 = cos(w01);
    sinw01 = sin(w01);
    alpha1 = sinw01 / (2 * q1);

    b01 = (1 + cosw01)/2;
    b11 = -(1 + cosw01);
    b21 = (1 + cosw01)/2;
    a01 = 1 + alpha1;
    a11 = -2 * cosw01;
    a21 = 1 - alpha1;
    b01 /= a01;
    b11 /= a01;
    b21 /= a01;
    a11 /= a01;
    a21 /= a01;

    a3 = 10^(gain3/40);
    s3 = 2;
    q3 = 1 / (sqrt((a3 + 1/a3)*(1/s3 - 1) + 2));
    w03 = 2 * $pi * freq3/srate;
    cosw03 = cos(w03);
    sinw03 = sin(w03);
    alpha3 = sinw03 / (2 * q3);

    b03 = a3 * ((a3+1) - (a3-1)*cosw03 + 2*sqrt(a3)*alpha3);
    b13 = 2 * a3 * ((a3-1) - (a3+1)*cosw03);
    b23 = a3 * ((a3+1) - (a3-1)*cosw03 - 2*sqrt(a3)*alpha3);
    a03 = (a3+1) + (a3-1)*cosw03 + 2*sqrt(a3)*alpha3;
    a13 = -2 * ((a3-1) + (a3+1)*cosw03);
    a23 = (a3+1)+(a3-1)*cosw03-2*sqrt(a3)*alpha3;
    b03 /= a03;
    b13 /= a03;
    b23 /= a03;
    a13 /= a03;
    a23 /= a03;

    a5 = 10^(gain5/20);
    q5 = 1.4;
    w05 = 2 * $pi * freq5/srate;
    cosw05 = cos(w05);
    sinw05 = sin(w05);
    alpha5 = sinw05 / (2 * q5);

    b05 = 1 + alpha5 * a5;
    b15 = -2 * cosw05;
    b25 = 1 - alpha5 * a5;
    a05 = 1 + alpha5 / a5;
    a15 = -2 * cosw05;
    a25 = 1 - alpha5 / a5;
    b05 /= a05;
    b15 /= a05;
    b25 /= a05;
    a15 /= a05;
    a25 /= a05;

    a7 = 10^(gain7/40);
    freq7 = 12000;
    s7 = 0.3;
    q7 = 1 / (sqrt((a7 + 1/a7)*(1/s7 - 1) + 2));
    w07 = 2 * $pi * freq7/srate;
    cosw07 = cos(w07);
    sinw07 = sin(w07);
    alpha7 = sinw07 / (2 * q7);

    b07 = a7 * ((a7+1) + (a7-1)*cosw07 + 2*sqrt(a7)*alpha7);
    b17 = -2*a7*((a7-1) + (a7+1)*cosw07);
    b27 = a7*((a7+1) + (a7-1)*cosw07 - 2*sqrt(a7)*alpha7);
    a07 = (a7+1) - (a7-1)*cosw07 + 2*sqrt(a7)*alpha7;
    a17 = 2*((a7-1) - (a7+1)*cosw07);
    a27 = (a7+1)-(a7-1)*cosw07 - 2*sqrt(a7)*alpha7;
    b07 /= a07;
    b17 /= a07;
    b27 /= a07;
    a17 /= a07;
    a27 /= a07;
    parameters_update_on = 0;
    caller = 0;
  );

@slider
  caller = 1;

@serialize // add this block for tk extra features
  file_var(0, while_playing);
  file_var(0, while_recording);
  file_var(0, while_stopped);
  file_var(0, LA2Kan_VERSION);
  file_var(0, link_group);
  seriloop = 0;
  loop(64*16 + 27 + 16,
  file_var(0, gmem[seriloop]);
  seriloop += 1;
  );
  seriloop = 0;
  loop(200*16,
  file_var(0, group_generics[seriloop]);
  seriloop += 1;
  );

@sample

  S2_sample_on = 1;

  // extra tk features
  gmem[16*64 + 10 + link_group] != 1 ? link_group = 0;
  group_check_smpl();

  caller == 1 ? (
    parameters_update_on == 0 ? (
      parameters_update();
    );
  );

  // extra tk features
  playstates();
  process = 0;
  while_playing ? is_playing ? process = 1;
  while_recording ? is_recording ? process = 1;
  while_stopped ? is_stopped ? process = 1;

  process == 1 ? (
    hpf != 0 ? (
    ospl0 = spl0;
    spl0 = b01 * spl0 + b11 * xl11 + b21 * xl21 - a11 * yl11 - a21 * yl21;
    xl21 = xl11;
    xl11 = ospl0;
    yl21 = yl11;
    yl11 = spl0 ;

    ospl1 = spl1;
    spl1 = b01 * spl1 + b11 * xr11 + b21 * xr21 - a11 * yr11 - a21 * yr21;
    xr21 = xr11;
    xr11 = ospl1;
    yr21 = yr11;
    yr11 = spl1 ;
    );

    lshelf != 0 && gain3 != 0 ? (
    ospl0 = spl0;
    spl0 = b03 * spl0 + b13 * xl13 + b23 * xl23 - a13 * yl13 - a23 * yl23;
    xl23 = xl13;
    xl13 = ospl0;
    yl23 = yl13;
    yl13 = spl0;

    ospl1 = spl1;
    spl1 = b03 * spl1 + b13 * xr13 + b23 * xr23 - a13 * yr13 - a23 * yr23;
    xr23 = xr13;
    xr13 = ospl1;
    yr23 = yr13;
    yr13 = spl1;
    );

    gain5 != 0 ? (
    ospl0 = spl0;
    spl0 = b05 * spl0 + b15 * xl15 + b25 * xl25 - a15 * yl15 - a25 * yl25;
    xl25 = xl15;
    xl15 = ospl0;
    yl25 = yl15;
    yl15 = spl0;

    ospl1 = spl1;
    spl1 = b05 * spl1 + b15 * xr15 + b25 * xr25 - a15 * yr15 - a25 * yr25;
    xr25 = xr15;
    xr15 = ospl1;
    yr25 = yr15;
    yr15 = spl1;
    );

    gain7 != 0 ? (
    ospl0 = spl0;
    spl0 = b07 * spl0 + b17 * xl17 + b27 * xl27 - a17 * yl17 - a27 * yl27;
    xl27 = xl17;
    xl17 = ospl0;
    yl27 = yl17;
    yl17 = spl0;

    ospl1 = spl1;
    spl1 = b07 * spl1 + b17 * xr17 + b27 * xr27 - a17 * yr17 - a27 * yr27;
    xr27 = xr17;
    xr17 = ospl1;
    yr27 = yr17;
    yr17 = spl1;
    );

    spl0 *= gain;
    spl1 *= gain;
  );

//@gfx 178 209 // linux
@gfx 141 165 // windows
  tk_gfx_setup();
  gfx_ext_flags == 0 ? (  // full ui
    set_background(0);
                                    //mode=0 you manually write your code for handling mouse input; mode=1 automatic handling
    //Knobs                   (slider    default     min      max  step         x          y   frames  scaling  file  mode  reverse) (frames = 0 = auto calculate)   (step=0=default floating numbers as step)   
    kHPF.parameter_config     ( 1,             0,      0,       4,    1,     131/2,     379/2,     0,       1,     1,    1,       0);    
    kLF.parameter_config      ( 2,             0,      0,       4,    1,     321/2,     158/2,     0,       1,     2,    1,       0);    
    kLBoost.parameter_config  ( 3,             0,    -20,      20,  0.1,     542/2,     357/2,     0,       1,     4,    1,       0);    
    kMF.parameter_config      ( 4,             0,      0,       5,    1,     824/2,     158/2,     0,       1,     3,    1,       0);    
    kMBoost.parameter_config  ( 5,             0,    -20,      20,  0.1,    1041/2,     354/2,     0,       1,     4,    1,       0);    
    kHBoost.parameter_config  ( 6,             0,    -20,      20,  0.1,    1207/2,     123/2,     0,       1,     4,    1,       0);    
    kGain.parameter_config    ( 7,             0,    -20,      20,  0.1,    1385/2,     376/2,     0,       1,     5,    1,       0);    
    setup_dmenu("Stillwell RBJ 1073 Equalizer", "1", "Analog Obsession, Tukan Studios, Pitufodelbosque, ReArtist", 0.6); // setup menu, arguments: jsfx name, version, graphics, zoom

    mouse_wheel=0;
  ):gfx_ext_flags == 1 ? ( // embedded mcp ui
    set_background(6,0.157,0.173,0.188);
                                    //mode=0 you manually write your code for handling mouse input; mode=1 automatic handling
    //Knobs                   (slider    default     min      max  step         x          y   frames  scaling  file  mode  reverse) (frames = 0 = auto calculate)   (step=0=default floating numbers as step)   
    kHPF.parameter_config     ( 1,             0,      0,       4,    1,      29/2,     445/2,     0,       1,     1,    1,       0);    
    kLF.parameter_config      ( 2,             0,      0,       4,    1,      30/2,     243/2,     0,       1,     2,    1,       0);    
    kLBoost.parameter_config  ( 3,             0,    -20,      20,  0.1,     254/2,     444/2,     0,       1,     4,    1,       0);    
    kMF.parameter_config      ( 4,             0,      0,       5,    1,      30/2,      43/2,     0,       1,     3,    1,       0);    
    kMBoost.parameter_config  ( 5,             0,    -20,      20,  0.1,     254/2,     243/2,     0,       1,     4,    1,       0);    
    kHBoost.parameter_config  ( 6,             0,    -20,      20,  0.1,     254/2,      40/2,     0,       1,     4,    1,       0);    

    mouse_wheel=0;
  );
  
  // update parameters
  S2_sample_on == 0 ? (
  gmem[16*64 + 10 + link_group] != 1 ? link_group = 0; // tk extra features
  group_check_gfx(); // tk extra features
    caller == 1 ? (
        parameters_update_on == 0 ? (
          parameters_update();
        );
    );
  );
  S2_sample_on = 0;
