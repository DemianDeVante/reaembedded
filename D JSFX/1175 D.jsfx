// Copyright 2006, Thomas Scott Stillwell
// All rights reserved.
//
//Redistribution and use in source and binary forms, with or without modification, are permitted 
//provided that the following conditions are met:
//
//Redistributions of source code must retain the above copyright notice, this list of conditions 
//and the following disclaimer. 
//
//Redistributions in binary form must reproduce the above copyright notice, this list of conditions 
//and the following disclaimer in the documentation and/or other materials provided with the distribution. 
//
//The name of Thomas Scott Stillwell may not be used to endorse or 
//promote products derived from this software without specific prior written permission. 
//
//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
//IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND 
//FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS 
//BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
//(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
//PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
//STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
//THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
desc:1175 (DD)
//desc:1175 FAST Attack Compressor with Program-Dependent Release [Stillwell]
//tags: dynamics compressor
//author: Stillwell

slider1:0<-60,0,0.1>-Threshold (dB)
slider2:5<0,9,1{Blown Capacitor 4 (Deprecated),Blown Capacitor 8 (Deprecated),Blown Capacitor 12 (Deprecated),Blown Capacitor 20 (Deprecated),Blown Capacitor All (Deprecated),4,8,12,20,All}>-Ratio
slider3:0<-40,40,0.1>-Gain (dB)
slider4:20<20,2000,10>-Attack (uS)
slider5:250<20,1000,1>-Release (mS)
slider6:100<0,100,0.1>-Mix (%)
slider7:0<0,1,1{in,sidechain}>-input
slider8:1<0,5,5>-capacitors
slider9:1<0,1,1{off,on}>-Bypass
slider10:gain_db=0<-40,40,0.1>-Ingain (dB)

// 0 background >> 1-2 knobs >> 3-10 buttons >>  leds >> 11 meter
filename:0,DGFX/1175/bg.png
filename:1,DGFX/1175/knob-b.png
filename:2,DGFX/1175/knob-s.png
filename:3,DGFX/1175/button-4.png
filename:4,DGFX/1175/button-8.png
filename:5,DGFX/1175/button-12.png
filename:6,DGFX/1175/button-20.png
filename:7,DGFX/1175/button-all.png
filename:8,DGFX/1175/button-sc.png
filename:9,DGFX/1175/button-bl.png
filename:10,DGFX/1175/button-by.png
filename:11,DGFX/1175/meter.png
filename:12,DGFX/1175/knob-screw.png
filename:13,DGFX/1175/button-led.png
filename:14,DGFX/1175/bgmcp.png
filename:15,DGFX/1175/button-4b.png
filename:16,DGFX/1175/button-8b.png
filename:17,DGFX/1175/button-12b.png
filename:18,DGFX/1175/button-20b.png
filename:19,DGFX/1175/button-allb.png
filename:20,DGFX/1175/button-blb.png
filename:21,DGFX/1175/button-scb.png

import DGFX/tk_lib_d.jsfx-inc 
// vu meter library
import DGFX/tk-vu_lib_d.jsfx-inc

options:no_meter
options:gfx_hz=60
options:gmem=d1176

in_pin:left input
in_pin:right input
in_pin:left sidechain
in_pin:right sidechain
out_pin:left output
out_pin:right output

@init

  THISJSFX_VERSION = 1;
  gfx_ext_retina = 1;
  gfx_clear=0;
  lastCap=1;
  mouse_wheel=1;
  Number_input = 0;
  number_input_invalid = 0;
  number_input_x = 0;
  number_input_y=0;
  //ext_nodenorm = 1; // anti denormal noise disabled
  ext_noinit=1; // skip init on every transport start


  // tk extra features
  !initialized_playstates?(while_playing = while_recording = while_stopped = 1);
  s2_numbers_of_sliders = 10; // set the number of sliders for gorup linking

  mouse_sensivity();
  last_gain=10^(gain_db/20);



  function parameters_update() (
    parameters_update_on = 1;
    group_parameters(max_local_buffer_size-64); // tk extra features
    //Rest of @slider section
      next_gain=10^(gain_db/20);

      thresh = slider1;
      threshv = exp(thresh * db2log);

      capsc = log2db;
      (rpos = slider2) > 4 ? ( rpos -= 5; ) : ( capsc *= 2.08136898; /* broken capacitor */ );
      ratio = (rpos==0 ? 4 : (rpos==1 ? 8 : (rpos == 2 ? 12 : (rpos == 3 ? 20 : 20 ))));
      rpos == 4 ? (allin=1; cratio=20;) : (allin=0; cratio = ratio;);
      cthresh = (softknee ? (thresh -3) : thresh);
      cthreshv = exp(cthresh * db2log);
      makeup = slider3;
      makeupv = exp((makeup+autogain) * db2log);
      attime = slider4 / 1000000;
      reltime = slider5 / 1000;
      atcoef=exp(-1/(attime * srate));
      relcoef=exp(-1/(reltime * srate));
      mix=slider6/100;
      sidechain=slider7;
    //
    parameters_update_on = 0;
    caller = 0;
  );

  ext_tail_size = -1;
  log2db = 8.6858896380650365530225783783321; // 20 / ln(10)
  db2log = 0.11512925464970228420089957273422; // ln(10) / 20 
  attime=0.010;
  reltime=0.100;
  ratio=0;
  cratio=0;
  rundb=0;
  overdb=0;
  ratatcoef = exp(-1/(0.00001 * srate));
  ratrelcoef = exp(-1/(0.5 * srate));
  atcoef=exp(-1/(attime * srate));
  relcoef=exp(-1/(reltime * srate));
  mix=1;
  gr_meter=1;
  gr_meter_decay = exp(1/(1*srate));
  ext_gr_meter = 0;
  //  --------------- VU METER  --------------- //
  meterspeed76 = 40;
  meter_maxdbtunning=1.27;
  GRmeter.mn_meter_reinit2(meterspeed76, meter_maxdbtunning);
  GRmeter.mn_meter_init();
@slider
  caller = 1;

@serialize // add this block for tk extra features
  file_var(0, while_playing);
  file_var(0, while_recording);
  file_var(0, while_stopped); file_var(0, zoom_off);
  file_var(0, LA2Kan_VERSION);
  file_var(0, link_group);
  seriloop = 0;
  loop(64*16 + 27 + 16 +16 +16,
  file_var(0, gmem[seriloop]);
  seriloop += 1;
  );
  seriloop = 0;
  loop(200*16,
  file_var(0, group_generics[seriloop]);
  seriloop += 1;
  );

@block
  d_gain = (next_gain - last_gain)/samplesblock;

  // meter functionality
  srate != srate_old ? (GRmeter.mn_meter_init();   GRmeter.mn_meter_reinit2(meterspeed76, meter_maxdbtunning); caller = 1);
  srate_old = srate;
  
@sample
  S2_sample_on = 1;

  // extra tk features
  gmem[16*64 + 10 + link_group] != 1 ? link_group = 0;
  group_check_smpl();

  caller == 1 ? (
    parameters_update_on == 0 ? (
      parameters_update();
    );
  );

  // extra tk features
  playstates();
  process = 0;
  while_playing ? is_playing ? process = 1;
  while_recording ? is_recording ? process = 1;
  while_stopped ? is_stopped ? process = 1;
  initialized_playstates=1;


  slider9==0?process=0;
  
  process==1?(
    spl0 *= last_gain;
    spl1 *= last_gain;
    last_gain += d_gain;
    sidechain==0?(scspl0=abs(spl0);scspl1=abs(spl1)):sidechain==1?(scspl0=abs(spl2);scspl1=abs(spl3));
    maxscspl = max(scspl0,scspl1);
    maxscspl=maxscspl*maxscspl;
    ospl0 = spl0;
    ospl1 = spl1;
    aspl0 = abs(spl0);
    aspl1 = abs(spl1);
    runave = maxscspl + rmscoef * (runave - maxscspl);
    det = sqrt(max(0,runave));

    overdb = max(0, capsc * log(det/cthreshv));

    overdb - rundb > 5 ? (averatio = 4;);

    overdb > rundb ? (
      rundb = overdb + atcoef * (rundb - overdb);
      runratio = averatio + ratatcoef * (runratio - averatio);
    ) : (
      rundb = overdb + relcoef * (rundb - overdb);
      runratio = averatio + ratrelcoef * (runratio - averatio);
    );
    overdb = rundb;
    averatio = runratio;

    allin ? (
      cratio = 12 + averatio;
    ) : (
      cratio = ratio;
    );

    ext_gr_meter = gr = -overdb * (cratio-1)/cratio;
    grv = exp(gr * db2log);

    runmax = maxover + relcoef * (runmax - maxover);  // highest peak for setting att/rel decays in reltime
    maxover = runmax;

  //  grv < gr_meter ? gr_meter=grv : ( gr_meter*=gr_meter_decay; gr_meter>1?gr_meter=1; );
      //gr_meter_decay = 1.1;
      grv < gr_meter ? gr_meter=grv : ( gr_meter = grv; gr_meter>1?gr_meter=1; );// gr_meter*=gr_meter_decay
      grmin = min( min(cG,cG) , grmin);

    spl0 *= grv * makeupv * mix;
    spl1 *= grv * makeupv * mix;  
    
    spl0 += ospl0 * (1-mix);
    spl1 += ospl1 * (1-mix);

  GRmeter.gr_mnmetersample(grv); //3.7 ,(grvdb2ratio(-0)
  ):(GRmeter.gr_mnmetersample(0)); //3.7);

//full  1452   459                   // full ui background dimensions
//mcp    507   627                   // mcp version background dimensions
//win    489   gfx_h                 // windows minimum width (and macOS maybe)
//lin    619   gfx_h                 // linux minimum width
// gfx_h= full_h * os_w / full_w 
// gfx_w = gfx_h*mcp_w/mcp/h         // around this value for some reason the mcp aspect ratio is a bit taller

<? // @gfx setup
  w_bg=1452;
  h_bg=459;
  mcp_ratio="tall";
  include("DGFX/ddconfig.jsfx-inc");
?>
  tk_gfx_setup();
  gfx_ext_flags == 0 ? (  // full ui
    unscaled_factor=0.5;
    set_background(0);

    GRmeter.draw_meter2(11, 443, 195-158, 1.26, 1, 1, 0.2, 1.1, 37, 108, 0, 1.2);

                                      //mode=0 you manually write your code for handling mouse input; mode=1 automatic handling
    //Knobs                      (slider  default     min      max   step   x        y   frames  scaling  file  mode  reverse) (frames = 0 = auto calculate)      
    kThres.parameter_config      (1,           0,    -60,       0,   0,  20,     199-157,     0,       1,     1,    1,       0);    
//    kIn.parameter_config      (10,           0,    -40,      40,   0,  20,     199-157,     0,       1,     1,    1,       0);    
    kOutput.parameter_config     (3,           0,    -40,      40,   0, 161,     199-157,     0,       1,     1,    1,       0);    
    kAttack.parameter_config     (4,          20,     20,    2000,   0, 310,     190-157,     0,       1,     2,    1,       1);    
    kRelease.parameter_config    (5,         250,     20,    1000,   0, 310,     285-157,     0,       1,     2,    1,       1);    
    kMix.parameter_config        (6,         100,      0,     100,   0,  550,      340-157,     0,       0.8,    12,    1,       0);    

    //Buttons                    (slider   orient  off_val    on_val    x        y           scaling  file   mode) (orient = 0 = horizontal image; orient = 1 = vertical image)
    
    slider8==0?( // If blown capacitor turned off
      bRatio4.button_config        (2,           0,         0,        0 ,404,     190-157,             1,     3,     1);
      bRatio8.button_config        (2,           0, 1             ,1              ,404,     232-157,             1,     4,     1);
      bRatio12.button_config       (2,           0, 2             ,2              ,404,     274-157,             1,     5,     1);
      bRatio20.button_config       (2,           0, 3             ,3              ,404,     316-157,             1,     6,     1);
      bAll.button_config           (2,           0, 4             ,4              ,698,     316-157,             1,     7,     1);
    ):(  // Blown capacitors
      bRatio4.button_config        (2,           0,          5,       5 ,404,     190-157,             1,     3,     1);
      bRatio8.button_config        (2,           0,        1+5,     1+5 ,404,     232-157,             1,     4,     1);
      bRatio12.button_config       (2,           0,        2+5,     2+5 ,404,     274-157,             1,     5,     1);
      bRatio20.button_config       (2,           0,        3+5,     3+5 ,404,     316-157,             1,     6,     1);
      bAll.button_config           (2,           0,        4+5,     4+5 ,698,     316-157,             1,     7,     1);
    );
    bBypass.button_config        (9,           0,      1,       0,     698,     190-157,             1,    10,     1);
    bBlown.button_config         (8,           0,      1,       0,     698,     274-157,             1,     9,     1);
    bSC.button_config            (7,           0,      0,       1,     698,     232-157,             1,     8,     1);

    setup_dmenu("Stillwell 1175 Compressor", "1", "Analog Obsession, Tukan Studios, Pitufodelbosque, ReArtist", 0.6); // setup menu, arguments: jsfx name, version, graphics, zoom


    mouse_wheel=0;
  ):gfx_ext_flags == 1 ? ( // embedded mcp ui

    set_background(14,0.054,0.047,0.039);
      

    //GRmeter.draw_meter(25, -12, 1.25, 11);
    GRmeter.draw_meter2(11, 25, -12, 1.25, 1, 1, 0.2, 1.1, 37, 108, 0, 1.2);


                                      //mode=0 you manually write your code for handling mouse input; mode=1 automatic handling
    //Knobs                      (slider  default     min      max  step    x        y   frames  scaling  file  mode  reverse) (frames = 0 = auto calculate)      
//    kIn.parameter_config         (10,           0,    -40,      40,     43,     231,     0,       0.767,     1,    1,       0);    
    kAttack.parameter_config     (4,          20,     20,    2000,  0,  45,     133,     0,       1,     2,    1,       1);    
    kRelease.parameter_config    (5,         250,     20,    1000,  0,  175,     133,     0,       1,     2,    1,       1);    
    kMix.parameter_config        (6,         100,      0,     100,  0,   125,      157,     0,       1,    12,    1,       0);    
    kThres.parameter_config    (1,           0,    -60,       0,    0, 43,     210,     0,       0.767,     1,    1,       0);    
    kOutput.parameter_config     (3,           0,    -40,      40,  0,  168,     210,     0,       0.767,     1,    1,       0);    

    //Buttons                    (slider   orient  off_val    on_val    x        y           scaling  file   mode) (orient = 0 = horizontal image; orient = 1 = vertical image)
    
    slider8==0?( // Blown Capacitors turned off
      bRatio4.button_config        (2,           0,         0,        0 ,1,     0,             1,     15,     1);
      bRatio8.button_config        (2,           0, 1             ,1              ,1,     45,             1,     16,     1);
      bRatio12.button_config       (2,           0, 2             ,2              ,1,     90,             1,     17,     1);
      bRatio20.button_config       (2,           0, 3             ,3              ,1,     135,             1,     18,     1);
      bAll.button_config           (2,           0, 4             ,4              ,1,     180,             1,     19,     1);
    ):(  // Blown Capacitors
      bRatio4.button_config        (2,           0,          5,       5 ,1,     0,             1,     15,     1);
      bRatio8.button_config        (2,           0,        1+5,     1+5 ,1,     45,             1,     16,     1);
      bRatio12.button_config       (2,           0,        2+5,     2+5 ,1,     90,             1,     17,     1);
      bRatio20.button_config       (2,           0,        3+5,     3+5 ,1,     135,             1,     18,     1);
      bAll.button_config           (2,           0,        4+5,     4+5 ,1,     180,             1,     19,     1);
    );
    //bBypass.button_config        (9,           0,      1,       0,     5,     190-157,             1,    10,     1);
    bBlown.button_config         (8,           0,      1,       0,     1,     225,             1,     20,     1);
    bSC.button_config            (7,           0,      0,       1,     1,     270,             1,     21,     1);

 
    mouse_wheel=0;
    gfx_r=gfx_g=gfx_b=gfx_a=0.8; // LABELS
    kAttack.attached_label("A", 27, -65, "Verdana",55,'b');
    kRelease.attached_label("R",-25, -65, "Verdana",50,'b');
    kThres.attached_label("THR",0, "Verdana",60,'b');
    kOutput.attached_label("OUT",0, "Verdana",60,'b');
  );
  
  // update parameters
  S2_sample_on == 0 ? (
  gmem[16*64 + 10 + link_group] != 1 ? link_group = 0; // tk extra features
  group_check_smpl(); // tk extra features
    caller == 1 ? (
        parameters_update_on == 0 ? (
          parameters_update();
        );
    );
  );
  S2_sample_on = 0;
