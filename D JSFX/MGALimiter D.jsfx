// MGA JS Limiter: Limits the maximum output volume of a audio signal
// Copyright (C) 2008  Michael Gruhn
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

desc:MGA Limiter (DD)
//tags: dynamics limiter
//author: LOSER

slider1:0<-50,0,0.1>-Threshold (dB)
slider2:200<0,500,1>-Release (ms)
slider3:-0.1<-6,0,0.1>-Ceiling

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

filename:0,DGFX/mgalimiter/bg.png
filename:1,DGFX/mgalimiter/knob.png
filename:2,DGFX/mgalimiter/meter.png
filename:3,DGFX/mgalimiter/bgmcp.png

import DGFX/tk_lib_d.jsfx-inc 
// vu meter library, skip this line if not using a meter
import DGFX/tk-vu_lib_d.jsfx-inc

options:no_meter
options:gfx_hz=60
// write a cool name to store jsfx memory below
options:gmem=mgalimiterd  

@init
  THISJSFX_VERSION = 1;
  gfx_ext_retina = 1;
  gfx_clear=0;
  lastCap=1;
  mouse_wheel=1;
  Number_input = 0;
  number_input_invalid = 0;
  number_input_x = 0;
  number_input_y=0;
  ext_noinit=1;

  // tk extra features
  lastCap=1;
  mouse_wheel=1;
  is_recording = 0; is_playing = 0; is_stopped = 1;
  while_playing = 1; while_recording = 1; while_stopped = 1;
  Number_input = 0;
  number_input_raw = 0;
  number_input_use = 0;
  komma = 0;
  in_key = 0;
  number_input_x = 0;
  number_input_y=0;
  number_input_slider = 0;
  number_input_min=0;
  number_input_max=0;
  number_input_invalid = 0;
  number_input_sign=1;
  s2_numbers_of_sliders = 3; // set the number of sliders for gorup linking
  s2_numbers_of_generics = 0;
  group_generics = 0; // fuer group_generics[bis zu 200] <-- ?
  sliders_old = group_generics + 16*200;
  generics_old = sliders_old + 16*64;

  mouse_sensivity();

  function parameters_update() (
    parameters_update_on = 1;
    group_parameters(); // tk extra features

    // Paste all contents of @slider here
    thresh = 10^(slider1/20);
    ceiling = 10^(slider3/20);
    volume = ceiling/thresh;

    release = slider2/1000;
    r = exp(-3/(srate*max(release,0.05)));

    parameters_update_on = 0;
    caller = 0;
  );
  
  // skip this 3 lines if not using a gain reduction meter
  meter_maxdbtunning=1.27;
  GRmeter.mn_meter_reinit2(40,meter_maxdbtunning);
  GRmeter.mn_meter_init();

  HOLDTIME = srate/128;
  ext_tail_size = -1;
  ext_gr_meter = 0;

  r1Timer = 0;
  r2Timer = HOLDTIME/2;

  gr_meter=1;
  gr_meter_decay = exp(1/(1*srate));

@slider
  caller = 1;

@serialize // add this block for tk extra features
  file_var(0, while_playing);
  file_var(0, while_recording);
  file_var(0, while_stopped); file_var(0, zoom_off);
  file_var(0, LA2Kan_VERSION);
  file_var(0, link_group);
  seriloop = 0;
  loop(64*16 + 27 + 16,
  file_var(0, gmem[seriloop]);
  seriloop += 1;
  );
  seriloop = 0;
  loop(200*16,
  file_var(0, group_generics[seriloop]);
  seriloop += 1;
  );

@sample
  S2_sample_on = 1;

  // extra tk features
  gmem[16*64 + 10 + link_group] != 1 ? link_group = 0;
  group_check_smpl();

  caller == 1 ? (
    parameters_update_on == 0 ? (
      parameters_update();
    );
  );

  // extra tk features
  playstates();
  process = 0;
  while_playing ? is_playing ? process = 1;
  while_recording ? is_recording ? process = 1;
  while_stopped ? is_stopped ? process = 1;

  process == 1 ? ( 

    maxSpls=max(abs(spl0),abs(spl1));

    (r1Timer+=1) > HOLDTIME ? (r1Timer = 0; max1Block = 0; );
    max1Block = max(max1Block,maxSpls);
    (r2Timer+=1) > HOLDTIME ? (r2Timer = 0; max2Block = 0; );
    max2Block = max(max2Block,maxSpls);

    envT = max(max1Block,max2Block);

    env = env < envT ? envT : envT + r*(env-envT);

    (env > thresh) ? gain = (g_meter=(thresh / env))*volume : (g_meter=1; gain=volume;);

    spl0*=gain;
    spl1*=gain;

    g_meter < gr_meter ? gr_meter=g_meter : ( gr_meter*=gr_meter_decay; gr_meter>1?gr_meter=1; );
    GRmeter.gr_mnmetersample(gr_meter); //3.7 
  ):(GRmeter.gr_mnmetersample(0));
@block 
  srate != srate_old ? (GRmeter.mn_meter_init();   GRmeter.mn_meter_reinit2(40,meter_maxdbtunning); caller = 1);
  srate_old = srate;

  ext_gr_meter = gr_meter > 0 ? log(gr_meter) * (20/log(10)) : -150; 

// ----------------- GRAPHICS -----------------

//full  1260   420                   // full ui background dimensions
//mcp    580   464                   // mcp version background dimensions
//win    489   gfx_h                 // windows minimum width (and macOS maybe)
//lin    619   gfx_h                 // linux minimum width
// gfx_h= full_h * os_w / full_w 
// gfx_w = gfx_h*mcp_w/mcp/h         // around this value for some reason the mcp aspect ratio is a bit taller
<? // @gfx setup
  w_bg=1260;
  h_bg=420;
  mcp_ratio="wide";
  include("DGFX/ddconfig.jsfx-inc");
?>
  tk_gfx_setup();
  gfx_ext_flags == 0 ? (  // full ui
    unscaled_factor=0.55;
    set_background(0);
    GRmeter.draw_meter2(2, 400, 35, 1.15, 1, 1, 0.2, 1.1, 37, 108, 0, 1.2);
    //GRmeter.draw_meter2(2, 402, 32, 1.12, 0.98, 1, 0.2, 1, 37, 110, 0, 0.42); //draw meter png, x, y, zoom, x_center_offset, y_center_offset, needle_line_start, needle_line_end, leftmostDegree, rightmostDegree, dblimit, needlebias        --remove this line if not using a meter
    //GRmeter.draw_meter(402, 32, 1.12, 2); //draw meter x, y, zoom, png       --remove this line if not using a meter
                                    //mode=0 you manually write your code for handling mouse input; mode=1 automatic handling
    //Knobs                   (slider    default     min      max  step        x        y   frames  scaling  file  mode  reverse) (frames = 0 = auto calculate)   (step=0=default floating numbers as step)   
    kThres.parameter_config   ( 1,             0,    -30,       0,    0,     51/2,   121/2,     0,       1,     1,    1,       0);    
    kRel.parameter_config     ( 2,           200,      0,     500,    1,    313/2,   121/2,     0,       1,     1,    1,       0);    
    kCeil.parameter_config    ( 3,          -0.1,     -6,       0,  0.1,    574/2,   121/2,     0,       1,     1,    1,       0);    
    //Buttons              (slider     orient  off_val   on_val     x        y           scaling  file  mode) (orient = 0 = horizontal image; orient = 1 = vertical image)
    //.button_config         (  ,              ,       ,        ,       ,        ,              1,      ,    1);
    setup_dmenu("LOSER MGA Limiter", "1", "Analog Obsession, Tukan Studios, Pitufodelbosque, ReArtist", 0.5); // setup menu, arguments: jsfx name, version, graphics, zoom

    mouse_wheel=0;
  ):gfx_ext_flags == 1 ? ( // embedded mcp ui
    set_background(3,0.357,0.353,0.353);
                                    //mode=0 you manually write your code for handling mouse input; mode=1 automatic handling
    //Knobs                   (slider    default     min      max  step        x        y   frames  scaling  file  mode  reverse) (frames = 0 = auto calculate)   (step=0=default floating numbers as step)   
    kThres.parameter_config   ( 1,             0,    -30,       0,    0,     28/2,   214/2,     0,       1,     1,    1,       0);    
    kRel.parameter_config     ( 2,           200,      0,     500,    1,    218/2,   214/2,     0,       1,     1,    1,       0);    
    kCeil.parameter_config    ( 3,          -0.1,     -6,       0,  0.1,    414/2,   214/2,     0,       1,     1,    1,       0);    
    //Buttons              (slider     orient  off_val   on_val     x        y           scaling  file  mode) (orient = 0 = horizontal image; orient = 1 = vertical image)
    //.button_config         (  ,              ,       ,        ,       ,        ,              1,      ,    1);

    mouse_wheel=0;

    barmeter_hor(gr_meter, 60/2, 45/2, 520/2, 460/2, 0); // grvalue, y, h, x, w

  );
  
  // update parameters
  S2_sample_on == 0 ? (
  gmem[16*64 + 10 + link_group] != 1 ? link_group = 0; // tk extra features
  group_check_gfx(); // tk extra features
    caller == 1 ? (
        parameters_update_on == 0 ? (
          parameters_update();
        );
    );
  );
  S2_sample_on = 0;

