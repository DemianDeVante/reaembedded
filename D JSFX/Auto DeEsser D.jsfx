desc:Auto DeEsser (DD)
/*version:0.4.5beta
desc:Auto DeEsser (beta)
author:Stephen Boyes
about:
  # Auto DeEsser (beta)
  Split the vocal signal into vowels and consonants
changelog:
  - beta v0.4.5
*/

filename:0,DGFX/autodeesser/bg.png
filename:1,DGFX/autodeesser/button-led.png
filename:2,DGFX/autodeesser/button-toggle.png
filename:3,DGFX/autodeesser/knob-big.png
filename:4,DGFX/autodeesser/meter.png
filename:5,DGFX/autodeesser/bgmcp.png

slider1:gain_db=0<-40,2,0.2>-vowel gain (dB)
slider2:thresh=<-50,0,0.2>-consonant limit threshold (dB)
slider3:con_gain_db=0<-40,2,0.2>-consonant gain (dB)
slider4:con_chan=0<0,1,1{one and two,three and four}>-consonant output channel
slider5:freq=6000<2000,10000>-Detector Freq
slider6:mon_detector=0<0,1,1{Off,On}>-Monitor Detector
slider7:que=3.0<1,5,0.1>-Q

import DGFX/tk_lib_d.jsfx-inc
import DGFX/tk-vu_lib_d.jsfx-inc

options:no_meter
options:gfx_hz=60
// write a cool name to store jsfx memory below
options:gmem=autodeesserD     

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output
out_pin:left ess
out_pin:right ess

@init

  autodeesser_VERSION = 1;
  gfx_ext_retina = 1;
  gfx_clear=0;
  lastCap=1;
  mouse_wheel=1;
  is_recording = 0; is_playing = 0; is_stopped = 1;
  !initialized_playstates?(while_playing = while_recording = while_stopped = 1);
  Number_input = 0;
  number_input_raw = 0;
  number_input_use = 0;
  komma = 0;
  in_key = 0;
  number_input_x = 0;
  number_input_y=0;
  number_input_slider = 0;
  number_input_min=0;
  number_input_max=0;
  number_input_invalid = 0;
  number_input_sign=1;
  s2_numbers_of_sliders = 7;
  s2_numbers_of_generics = 0;
  group_generics = 0; // fuer group_generics[bis zu 200]
  sliders_old = group_generics + 16*200;
  generics_old = sliders_old + 16*64;
  menu = 7;  
  logo = 8;
  ext_noinit=1;
  mouse_sensivity();

  last_gain=10^(gain_db/20);
  last_con_gain=10^(con_gain_db/20);
  ext_tail_size = -1;
  pdc_bot_ch=0;
  pdc_top_ch=4;
  pdc_delay=2;  
  gr_meter=1;
  gr_meter_decay = exp(1/(1*srate));

  rms_sec = 0.3 * 0.001;
  rms_Freq = 1/(2*$pi*rms_sec);
  rms_coef = (rms_Freq/srate)/(1+(rms_Freq/srate));
  rms_coef = 1-rms_coef;

  a_time = 0.3;
  att_sec = a_time * 0.001;
  att_Freq = 1/(2*$pi*att_sec);
  att_coef = (att_Freq/srate)/(1+(att_Freq/srate));
  att_coef = 1-att_coef;

  r_time = 3;
  rel_sec = r_time * 0.001;
  rel_Freq = 1/(2*$pi*rel_sec);
  rel_coef = (rel_Freq/srate)/(1+(rel_Freq/srate));
  rel_coef = 1-rel_coef;

  smooth = 2^-18;
  expand = 1;

  function svf_highp(v0,cutoff,Q)
  instance (ic1eq,ic2eq,v0,v1,v2,v3,a1,a2,a3,g,k,m0,m1,m2)
  (
  g = tan($pi*cutoff/srate);
  k = 1/q;
  a1 = 1/(1+g*(g+k));
  a2 = g*a1;
  a3 = g*a2;
  m0 = 1;
  m1 = -k;
  m2 = -1;
  v3 = v0-ic2eq;
  v1 = a1*ic1eq+a2*v3;
  v2 = ic2eq+a2*ic1eq+a3*v3;
  ic1eq = 2*v1-ic1eq;
  ic2eq = 2*v2-ic2eq;
  m0*v0+m1*v1+m2*v2
  );

  function svf_lowp(v0,cutoff,Q)
  instance (ic1eq,ic2eq,v0,v1,v2,v3,a1,a2,a3,g,k,mo,m1,m2)
  (
  g = tan($pi*cutoff/srate);
  k = 1/Q;
  a1 = 1/(1+g*(g+k));
  a2 = g*a1;
  a3 = g*a2;
  m0 = 0;
  m1 = 0;
  m2 = 1;
  v3 = v0-ic2eq;
  v1 = a1*ic1eq+a2*v3;
  v2 = ic2eq+a2*ic1eq+a3*v3;
  ic1eq = 2*v1-ic1eq;
  ic2eq = 2*v2-ic2eq;
  m0*v0+m1*v1+m2*v2
  );

  rel_ms = 75;
  rel = -1/(srate*0.001*rel_ms);
  att_ms = 0.75;
  att = 1/(srate*0.001*att_ms);

  function slew_release(in0)
  instance(in0,x,diff,out,out1)
  (
  x = in0-out1;  //difference from last sample
  diff = min(max(x,rel),att);
  out = max(min(out1+diff,1),0);
  out1 = out;
  out
  );

  function FIR(x,cx0,cx1,cx2,cx3,cx4)
  instance(x0,x1,x2,x3,x4)
  (
  x4 = x3;
  x3 = x2;
  x2 = x1;
  x1 = x0;
  x0 = x;
  cx0*x0 + cx1*x1 + cx2*x2 + cx3*x3 +cx4*x4
  );

  Fc = 900/srate;
  a = exp(-2*$pi*Fc);
  b = 1-a;

  function lowpass(in,b)
  instance(in,b,y)
  (
  y += b*(in-y);
  y
  );


  ratio = 10;
  slope = (1/ratio);
  corner = 5;  

  //mn_meter_reinit(45);
  //GRmeter.mn_meter_init();
  mnmeterspeed=45;
  meter_maxdbtunning=1.27; // --------------------------------------------------------------------------------------------------------- needle range
  GRmeter.mn_meter_reinit2(mnmeterspeed, meter_maxdbtunning);
  GRmeter.mn_meter_init(); // you can change GRmeter with any name you want for multiple meters
    
  function parameters_update() (
    parameters_update_on = 1;
    group_parameters(max_local_buffer_size-64);
    // Paste all contents of @slider here              
      next_gain = 10^(gain_db/20);
      next_con_gain = 10^(con_gain_db/20);

      thresh_in = 1 / 10^(thresh/20);
      thresh_out = 10^(thresh/20);
    parameters_update_on = 0; caller = 0;
  );
  
@slider
  caller = 1;

@serialize
  file_var(0, while_playing);
  file_var(0, while_recording);
  file_var(0, while_stopped); file_var(0, zoom_off);
  file_var(0, link_group);

  seriloop = 0;
  loop(64*16 + 27 + 16 +16 +16,
  file_var(0, gmem[seriloop]);
  seriloop += 1;
  );

  seriloop = 0;
  loop(200*16,
  file_var(0, group_generics[seriloop]);
  seriloop += 1;
  );

@block
  d_gain = (next_gain - last_gain)/samplesblock;
  d_con_gain = (next_con_gain - last_con_gain)/samplesblock;

  // meter functionality
  srate != srate_old ? (GRmeter.mn_meter_init();   GRmeter.mn_meter_reinit2(meterspeed76, meter_maxdbtunning); caller = 1);
  srate_old = srate;

@sample

  S2_sample_on = 1;
  gmem[16*64 + 10 + link_group] != 1 ? link_group = 0;
  group_check_smpl();
  caller == 1 ? (
    parameters_update_on == 0 ? (
      parameters_update();
    );
  );

  playstates();

  process = 0;
  while_playing ? is_playing ? process = 1;
  while_recording ? is_recording ? process = 1;
  while_stopped ? is_stopped ? process = 1;
  initialized_playstates=1;

  bypass ? process = 0;


  process == 1 ? (
    ////////detect HF level////////
    side_chain = 0.5*(spl0+spl1);
    ESchain = sss.svf_highp(side_chain,freq,que);
    ESlevel = sqrt(ess.svf_lowp(0.000000001+ESchain^2,520,0.5));

    ////////detect average level////////
    DThresh = (0.00001+side_chain^2);  //min threshold -50dB
    DThresh = t.svf_lowp(DThresh,510,0.5);  //dynamic threshold
    DThresh = sqrt(DThresh);

    ////////calculate is sound consonant or vowel////////
    consonant = 1/(1 + exp(-12*((ESlevel/DThresh)-1)));
    cx0=0.5;  cx1=0.8663;  cx2=1;  cx3=0.8663;  cx4=0.5;
    cxcx = cx0+cx1+cx2+cx3+cx4;
    cx0 /= cxcx;  cx1 /= cxcx;  cx2 /= cxcx;  cx3 /= cxcx; cx4 /= cxcx;
    consonant = fir.FIR(consonant,cx0,cx1,cx2,cx3,cx4);
    consonant = con.lowpass(consonant,b);
    consonant = slew.slew_release(consonant);
    vowel = 1-consonant;

    ////////split signal////////
    cx0=cx1=cx2=cx3=cx4=0;  cx2=1;
    spl0 = le.FIR(spl0,cx0,cx1,cx2,cx3,cx4);
    spl1 = ri.FIR(spl1,cx0,cx1,cx2,cx3,cx4);
    spl2 = consonant*spl0;
    spl3 = consonant*spl1;
    spl0 *= vowel;
    spl1 *= vowel;

    ////////shift some low into vowel////////
    low0 = c0.lowpass(spl2,b);
    low1 = c1.lowpass(spl3,b);
    spl0 += low0;
    spl1 += low1;
    spl2 -= low0;
    spl3 -= low1;


    ////////limiter////////
    //threshold
    spl2 *= thresh_in;
    spl3 *= thresh_in;

    //RMS
    square = (smooth+spl2^2+spl3^2)*0.5;
    out = square + rms_coef*(out - square);
    rms_out = SQRT(out);

    //calculate envelope
    env = rms_out + env_coef*(env - rms_out);
    env_dB = 20*log10(env);
    fuz = 1/(1+exp(-8*((last_env_dB/env_dB)-1)));
    env_coef = fuz*att_coef + (1-fuz)*rel_coef;
    last_env_dB = env_dB;

    //calculate ratio and threshold
    knee = 1 + 10^( ((expand-slope)/corner) * env_dB);
    knee = expand * env_dB - corner*log10(knee);
    gain_red_db = knee - env_dB;
    gr = 10^(gain_red_db/20);
    //gain reduction
    spl2 *= gr;
    spl3 *= gr;
    spl2 *= thresh_out;
    spl3 *= thresh_out;





    ////////output gain////////
    spl0 *= last_gain;
    spl1 *= last_gain;
    last_gain += d_gain;
    spl2 *= last_con_gain;
    spl3 *= last_con_gain;
    last_con_gain += d_con_gain;


    con_chan == 0 ? (
      spl0 = spl0+spl2;  spl1 = spl1+spl3;  spl2 = 0;  spl3 = 0;
    );
    mon_detector == 1 ? spl0 = spl1 = ESchain;  //monitor side chain





    gr = max(0.02,gr);
    gr < gr_meter ? gr_meter=gr : ( gr_meter*=gr_meter_decay; gr_meter>1?gr_meter=1; );
    grv=gr;
  ):(grv = 0); //Process
  ext_gr_meter = ratio2db(grv);
  //GRmeter.mnmetersample(grv*db2ratio(-3.9)); //3.7
  GRmeter.gr_mnmetersample(grv); //3.7 

  
// ----------------- GRAPHICS -----------------

<? // @gfx setup
  w_bg=1700;
  h_bg=573;
  mcp_ratio="tall";
  include("DGFX/ddconfig.jsfx-inc");
?>
  tk_gfx_setup();
  gfx_ext_flags == 0 ? (  // full ui
    unscaled_factor=0.4;
    set_background(0);
    GRmeter.draw_meter2(4, 515, 28, 1.2, 1, 1, 0.25, 1.1, 37, 108, 0, 1.2); //draw meter png, x, y, zoom, x_center_offset, y_center_offset, needle_line_start, needle_line_end, leftmostDegree, rightmostDegree, dblimit, needlebias  
                                    //mode=0 you manually write your code for handling mouse input; mode=1 automatic handling
    //Knobs                     (slider    default     min      max   step   x        y   frames  scaling  file  mode  reverse) (frames = 0 = auto calculate)      
    kThres.parameter_config    ( 2,        0,    -50,       0,    0.2,         75-14,      80-4,     0,       1.3,     3,    1,       0);    
    kFreq.parameter_config     ( 5,     6000,   2000,   10000,      1,        225-14,      80-4,     0,       1.3,     3,    1,       0);    
    kVowel.parameter_config    ( 1,        0,    -40,       2,    0.2,        530-14,     170-4,     0,       1,     3,    1,       0);    
    kCons.parameter_config     ( 3,        0,    -40,       2,    0.2,        680-14,     170-4,     0,       1,     3,    1,       0);    
    kQue.parameter_config      ( 7,        3,      1,       5,    0.1,        375-14,      80-4,     0,       1.3,     3,    1,       0);    


    //Buttons              (slider     orient  off_val   on_val     x        y           scaling  file  mode) (orient = 0 = horizontal image; orient = 1 = vertical image)
    bMonit.button_config   ( 6,             1,      0,       1,    165,     180,              1.1,     2,    1);
    bSide.button_config    ( 4,             1,      0,       1,    315,     180,              1.1,     2,    1);

    gfx_a=1;gfx_r=gfx_g=gfx_b=0.3;
    kThres.attached_label("THRESH",-6, "Verdana",22,'b');
    kFreq.attached_label("FREQ",-6, "Verdana",22,'b');
    kVowel.attached_label("VOWEL",-6, "Verdana",25,'b');
    kCons.attached_label("CONSONANT",-6, "Verdana",25,'b');
    kQue.attached_label("Q",-6, "Verdana",20,'b');

    bMonit.attached_label("MONIT",-12, "Verdana",20,'b');
    bSide.attached_label ("SPLIT",-12, "Verdana",20,'b');
    setup_dmenu("Auto DeEsser by Stephen Boyes", "1", "Analog Obsession, Tukan Studios, Pitufodelbosque, ReArtist", 0.6); // setup menu, arguments: jsfx name, version, graphics, zoom

    mouse_wheel=0;
  ):gfx_ext_flags == 1 ? ( // embedded mcp ui
    set_background(5,0.753,0.737,0.702);
    GRmeter.draw_meter2(4, 13, -4, 1.08, 1, 1, 0.25, 1.1, 37, 108, 0, 1.2); //draw meter png, x, y, zoom, x_center_offset, y_center_offset, needle_line_start, needle_line_end, leftmostDegree, rightmostDegree, dblimit, needlebias  
    //Buttons              (slider     orient  off_val   on_val     x        y           scaling  file  mode) (orient = 0 = horizontal image; orient = 1 = vertical image)
    bMonit.button_config   ( 6,             1,      0,       1,     88,     185,              1.3,     2,    1);
    //bSide.button_config    ( 4,             1,      1,       0,    178,     130,              1,     2,    1);
                                    //mode=0 you manually write your code for handling mouse input; mode=1 automatic handling
    //Knobs                     (slider    default     min      max  step    x        y   frames  scaling  file  mode  reverse) (frames = 0 = auto calculate)      
    kThres.parameter_config     ( 2,        0,    -50,       0,   0.2,   13,     115,     0,     1,     3,    1,       0);    
    kFreq.parameter_config      ( 5,     6000,   2000,   10000,     1,  148,     115,     0,     1,     3,    1,       0);    
    kVowel.parameter_config     ( 1,        0,    -40,       2,   0.2,   13,     203,     0,     1,     3,    1,       0);    
    kCons.parameter_config      ( 3,        0,    -40,       2,   0.2,  148,     203,     0,     1,     3,    1,       0);    
    //kQue.parameter_config       ( 7,        3,      1,       5,   0.1,    5,     194,     0,     1.2,     3,    1,       0);    

    gfx_a=1;gfx_r=gfx_g=gfx_b=0.3;
    kThres.attached_label("THR",-14, "Verdana",48,'b');
    kFreq.attached_label("FRQ",-14, "Verdana",48,'b');
    kVowel.attached_label(" VOW",-14, "Verdana",48,'b');
    kCons.attached_label(" CON",-14, "Verdana",48,'b');
    bMonit.attached_label("MON",-70, "Verdana",26,'b');
    mouse_wheel=0;
  );
  
  // update parameters
 S2_sample_on == 0 ? (
 gmem[16*64 + 10 + link_group] != 1 ? link_group = 0;
 group_check_smpl();
 caller == 1 ? (
   parameters_update_on == 0 ? (
     parameters_update();
   );
 );
 );
 S2_sample_on = 0;
