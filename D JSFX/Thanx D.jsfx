desc:Thanx EQ (DD)
//author:vladg/sound

slider1:0<-30,40,0.1>-Drive
slider2:0<-30,30,0.1>-Bias
slider3:0<-15,15,0.1>-Output

slider4:1<0,1,1{Off, Yes}>-Emphasis
slider5:0<0,1,1{Off, Yes}>-EQ
slider6:0<0,1,1{Off, Yes}>-Bypass

slider7:5<0,10,0.1>-Low
slider8:5<0,10,0.1>-Mid
slider9:5<0,10,0.1>-High

filename:0,DGFX/thanx/bg.png
filename:1,DGFX/thanx/bgmcp.png
filename:2,DGFX/thanx/knob-black.png
filename:3,DGFX/thanx/knob-red.png
filename:4,DGFX/thanx/knob-blue.png
filename:5,DGFX/thanx/button.png
filename:6,DGFX/thanx/led.png
import DGFX/tk_lib_d.jsfx-inc 
options:no_meter
// write a cool name to store jsfx memory below
options:gmem=ThanxD  
@init
  gfx_ext_retina = 1;
  gfx_clear=0;
  lastCap=1;
  mouse_wheel=1;
  Number_input = 0;
  number_input_invalid = 0;
  number_input_x = 0;
  number_input_y=0;
  ext_noinit=1;

  // tk extra features
  lastCap=1;
  mouse_wheel=1;
  is_recording = 0; is_playing = 0; is_stopped = 1;
  while_playing = 1; while_recording = 1; while_stopped = 1;
  Number_input = 0;
  number_input_raw = 0;
  number_input_use = 0;
  komma = 0;
  in_key = 0;
  number_input_x = 0;
  number_input_y=0;
  number_input_slider = 0;
  number_input_min=0;
  number_input_max=0;
  number_input_invalid = 0;
  number_input_sign=1;
  s2_numbers_of_sliders = 9; // set the number of sliders for gorup linking
  s2_numbers_of_generics = 0;
  group_generics = 0; // fuer group_generics[bis zu 200] <-- ?
  sliders_old = group_generics + 16*200;
  generics_old = sliders_old + 16*64;

  mouse_sensivity();

  // constants
  DC_FREQ_HZ = 5;
  PRE_EMPHASIS_DB = -12;
  PRE_EMPHASIS_HZ = 159;

  function DB_TO_K(x)
  (
    10 ^ (x / 20)
  );

  /*
  * FirstPole - analog first order filter:
  * H(s) = (A * s + B) / (C * s + D)
  */
  
  function FirstPole_lowshelf(G) local(SG)
  (
    SG = sqrt(G);
    
    this.A = 1;
    this.B = SG;
    this.C = 1;
    this.D = 1 / SG;
  );

  // analog -> digital
  function FirstPole_performBLT(freq_k) local(w0, KK, a0, a1, b0, b1) instance(A, B, C, D)
  (
    w0 = 2 * $PI * freq_k;
    KK = (w0 < $PI) ? (1 / tan(w0 / 2)) : 0;
      
    a0 = B + A * KK;
    a1 = B - A * KK;
    b0 = D + C * KK;
    b1 = D - C * KK;
    
    // prepare digital filter
    
    (b0 != 0) ? (
      this.a0 = a0 / b0;
      this.a1 = a1 / b0;
      this.b1 = -b1 / b0;
    ) : (
      this.a0 = 1;
      this.a1 = 0;
      this.b1 = 0;
    );
  );

  /*
  * Filter1 - digital first order filter:
  * H(z) = (a0 + z^-1 * a1) / (1 - z^-1 * b1)
  */

  function Filter1_Init()
  (
    this.a0 = 1;
    this.a1 = 0;
    this.b1 = 0;
  );

  function Filter1_reset()
  (
    this.x1 = 0;
    this.y1 = 0;
  );

  function Filter1_processSample(x) local(y)
  (
    y = this.a0 * x + this.a1 * this.x1 + this.b1 * this.y1;
    
    this.x1 = x;
    this.y1 = y;
    
    y;
  );

  function Filter1_lowshelf(freq_k, gain_k)
  (
    this.FirstPole_lowShelf(gain_k);
    this.FirstPole_performBLT(freq_k);
  );

  // get |H(z)^2|
  function Filter1_getAmplitude_2(freq_k) local(w, cw)
  (
    w = 2 * $PI * freq_k;
    cw = cos(w);
    
    (this.a0 ^ 2 + 2 * this.a0 * this.a1 * cw + this.a1 ^ 2) /
      (1 - 2 * this.b1 * cw + this.b1 ^ 2);
  );

  /*
  * Tanhx saturator
  */

  function tanh(x) local(a)
  (
    a = exp(x * 2);
    (a - 1) / (a + 1);
  );

  saturateSample.k = 7 / (71.4875 * log(10));

  function saturateSample(x, bias) local(a)
  (
    a = 10 ^ ((x - bias) * 20.425 + (x ^ 2 - bias ^ 2) * 12.75);
    (a - 1) / (a + 1) * saturateSample.k;
  );

  function saturator_setSampleRate()
  (
    this.f = DC_FREQ_HZ / srate;
    
    this.pre_emphasis.Filter1_lowshelf(PRE_EMPHASIS_HZ / srate, DB_TO_K(PRE_EMPHASIS_DB));
    this.post_emphasis.Filter1_lowshelf(PRE_EMPHASIS_HZ / srate, DB_TO_K(-PRE_EMPHASIS_DB));  
  );

  function saturator_reset() instance(s)
  (
    this.s = 0;
    
    this.pre_emphasis.Filter1_reset();
    this.post_emphasis.Filter1_reset();
  );

  function saturator_processSample(x) local(y)
  (
    x *= this.gain;

    (this.use_emphasis) ? (
      // pre-emphasis
      x = this.pre_emphasis.Filter1_processSample(x);
    );
    
    // smooth bias change
    this.bias_offset += this.f * (this.bias - this.bias_offset);

    // saturation
    y = saturateSample(x, this.s) + this.bias_offset;
    
    // DC remover
    this.s += this.f * y;

    (this.use_emphasis) ? (
      // post-emphasis
      y = this.post_emphasis.Filter1_processSample(y);
    );
    
    y / this.gain
  );

  function saturator_setSatThreshold(threshold_k, bias_offset)
  (
    // threshold to gain with some fine-tuning
    this.gain = 1 / threshold_k * 0.1;
    this.bias = bias_offset * 0.1;
  );

  /*
  * ToneStackEQ
  * https://docs.tokyodawn.net/slickeq-custom-models-guide/#Analog-Based_Model_Fender_Tone_Stack_EQ
  */

  function ToneStackEQ_setBands(BASS_POSITION, MID_POSITION, TREBLE_POSITION) local(
    BASS_TAPER, MID_TAPER, TREBLE_TAPER,
    R1, RB_MAX, RM_MAX, RT, RB, RM, K, freq_0, freq_2,
    C1, C3, MAKEUP, wH, GH, wL, GL, GM, GH_2, GM_2)
  (
    // potentiometers
    BASS_TAPER = 1/80 * exp(2 * log(9) * BASS_POSITION) - 1/80;
    MID_TAPER = 1/80 * exp(2 * log(9) * MID_POSITION) - 1/80;
    TREBLE_TAPER = TREBLE_POSITION;
    
    // resistors
    R1 = 10 * 10^3;
    RB_MAX = 50 * 10^3;
    RM_MAX = 10 * 10^3;
    RT = 50 * 10^3;

    RB = RB_MAX * BASS_TAPER;
    RM = RM_MAX * MID_TAPER;
    K = TREBLE_TAPER;

    //freq_0 = 41;
    //freq_2 = 6773;

    //C1 = 1 / (2 * $PI * freq_2 * RT);
    //C3 = (R1 + RB_MAX) / (2 * $PI * freq_0 * R1 * RB_MAX);
    
    C1 = 740 * 10^-12;
    C3 = 470 * 10^-9;
    
    MAKEUP = DB_TO_K(12);
    
    wH = (R1 + RM) / ((R1 * RT + RM *(RT + R1)) * C1);
    
    RB = max(RB, 0.00001);  // RB=0 requires separate calculation
    
    GH = (RM * (RT + R1) + R1 * RT * K) / (R1 * RT + RM * (RT + R1));
    wL = (R1 + RM + RB) / ((R1 + RM) * RB * C3);
    GL = (RB + RM) / (C1 * C3 * RB * (R1 * RT + RM * (RT + R1))) / (wL * wH);
    GM = ((((RM + RB) * (RT + R1) + R1 * RT * K) * C1 + RM * C3 * RB) / (C1 * C3 * RB * (R1 * RT + RM * (RT + R1))) - wL * (GL + GH)) / (wH - wL);
    
    this.filter_1.A = GM * MAKEUP;
    this.filter_1.B = GL * MAKEUP;
    this.filter_1.C = 1;
    this.filter_1.D = 1;
    
    this.filter_2.A = (GH - GM) * MAKEUP;
    this.filter_2.B = 0;
    this.filter_2.C = 1;
    this.filter_2.D = 1;
    
    wH = min(wH, $PI * srate * 0.99);   // Nyquist protection
    wL = min(wL, $PI * srate * 0.99);
    
    // parallel filters
    this.filter_1.FirstPole_performBLT(wL / (2 * $PI) / srate);
    this.filter_2.FirstPole_performBLT(wH / (2 * $PI) / srate);
  );

  function ToneStackEQ_reset()
  (
    this.filter_1.Filter1_reset();
    this.filter_2.Filter1_reset();
  );

  function ToneStackEQ_processSample(x) local(y1, y2)
  (
    // parallel filters
    y1 = this.filter_1.Filter1_processSample(x);
    y2 = this.filter_2.Filter1_processSample(x);
    
    y1 + y2;
  );

  function ToneStackEQ_getAmplitude_2(freq_k)
  (
    // ignore phase response for simplicity
    this.filter_1.Filter1_getAmplitude_2(freq_k) +
      this.filter_2.Filter1_getAmplitude_2(freq_k);
  );

  function ToneStackEQ_getAutoGain() local
    (min_freq_Hz, max_freq_Hz, N_steps, log_min_freq_Hz, log_max_freq_Hz,
    i, S, log_freq_Hz, freq_Hz, A_2, prev_A_2, prev_freq_Hz,
    rms_source, rms_target)
  (
    min_freq_Hz = 30;
    max_freq_Hz = 18000;
    N_steps = 20;
    
    log_min_freq_Hz = log(min_freq_Hz);
    log_max_freq_Hz = log(max_freq_Hz);
    
    // integral calculation
    i = 0;
    S = 0;
    
    loop(N_steps + 1,
    
      log_freq_Hz = (log_max_freq_Hz - log_min_freq_Hz) * (i / N_steps) + log_min_freq_Hz;
      
      freq_Hz = exp(log_freq_Hz);
      
      // amplitude^2
      A_2 = this.ToneStackEQ_getAmplitude_2(freq_Hz / srate);
      
      (i != 0) ? (
      
        // 1/2 * h * (a + b)
        S += 0.5 * (freq_Hz - prev_freq_Hz) * (A_2 + prev_A_2);
      
      );
      
      prev_A_2 = A_2;
      prev_freq_Hz = freq_Hz;
      
      i += 1;
    );
    
    rms_source = sqrt(S);
    rms_target = sqrt(0.5 * (max_freq_Hz - min_freq_Hz));
    
    rms_target / rms_source;
  );

  // continue @init:

  (sample_rate != srate) ? (
    // refresh sample rate
    left.saturator_setSampleRate();
    right.saturator_setSampleRate();
    
    sample_rate = srate;
  );

  // reset state
  left.saturator_reset();
  right.saturator_reset();

  left.ToneStackEQ_reset();
  right.ToneStackEQ_reset();

  function parameters_update() (
    parameters_update_on = 1;
    group_parameters(); // tk extra features
    // Paste all contents of @slider here
    // "Drive"
    sat_drive = DB_TO_K(slider1);

    // "Bias"
    bias_offset = slider2 / 10 * 0.1;

    // drive to threshold

    left.saturator_setSatThreshold(DB_TO_K(14) / sat_drive, bias_offset);
    right.saturator_setSatThreshold(DB_TO_K(14) / sat_drive, bias_offset);

    // "Output"
    output_gain = DB_TO_K(slider3);

    // "Emphasis"
    left.use_emphasis = slider4;
    right.use_emphasis = slider4;

    // "EQ"
    use_eq = slider5;

    // "Bypass"
    is_bypass = slider6;

    use_eq ? (
      // "Low", "Mid", "High"
      left.tone_stack_eq.ToneStackEQ_setBands(slider7 / 10, slider8 / 10, slider9 / 10);
      right.tone_stack_eq.ToneStackEQ_setBands(slider7 / 10, slider8 / 10, slider9 / 10);
      
      // autogain
      auto_gain_k =  left.tone_stack_eq.ToneStackEQ_getAutoGain();
    );
    parameters_update_on = 0;
    caller = 0;
  );

@slider
  caller = 1;

@serialize // add this block for tk extra features
  file_var(0, while_playing);
  file_var(0, while_recording);
  file_var(0, while_stopped); file_var(0, zoom_off);
  //file_var(0, LA2Kan_VERSION);
  file_var(0, link_group);
  seriloop = 0;
  loop(64*16 + 27 + 16,
  file_var(0, gmem[seriloop]);
  seriloop += 1;
  );
  seriloop = 0;
  loop(200*16,
  file_var(0, group_generics[seriloop]);
  seriloop += 1;
  );
@block
@sample
  S2_sample_on = 1;

  // extra tk features
  gmem[16*64 + 10 + link_group] != 1 ? link_group = 0;
  group_check_smpl();

  caller == 1 ? (
    parameters_update_on == 0 ? (
      parameters_update();
    );
  );

  // extra tk features
  playstates();
  process = 0;
  while_playing ? is_playing ? process = 1;
  while_recording ? is_recording ? process = 1;
  while_stopped ? is_stopped ? process = 1;
  //is_bypass==1?process=0;
  process == 1 ? (
    (use_eq) ? (
      // apply EQ
      spl0 = left.tone_stack_eq.ToneStackEQ_processSample(spl0);
      spl1 = right.tone_stack_eq.ToneStackEQ_processSample(spl1);
      
      // apply autogain
      spl0 *= auto_gain_k;
      spl1 *= auto_gain_k;
    );
    is_bypass==0?(
    // apply saturator
    spl0 = left.saturator_processSample(spl0);
    spl1 = right.saturator_processSample(spl1);
    );
    // output gain
    spl0 *= output_gain;
    spl1 *= output_gain;
  );

<? // @gfx setup
  w_bg=512;
  h_bg=216;
  mcp_ratio="tall";
  include("DGFX/ddconfig.jsfx-inc");
?>
  tk_gfx_setup();
  gfx_ext_flags == 0 ? (  // full ui
    unscaled_factor=1.35;
    set_background(0);
                                    //mode=0 you manually write your code for handling mouse input; mode=1 automatic handling
    //Knobs                   (slider    default     min      max  step         x          y   frames  scaling   png  mode  reverse) (frames = 0 = auto calculate)   (step=0=default floating numbers as step)   
    kDrive.parameter_config   ( 1,             0,    -30,      40,  0.1,        22,       14,     0,       0.9,     3,    1,       0);  
    kBias.parameter_config    ( 2,             0,    -30,      30,  0.1,       162,       14,     0,       0.9,     2,    1,       0);  
    kOutput.parameter_config  ( 3,             0,    -15,      15,  0.1,       202,       14,     0,       0.9,     2,    1,       0);  
    kLow.parameter_config     ( 7,             5,      0,      10,  0.1,        58,       62,     0,         1,     4,    1,       0);  
    kMid.parameter_config     ( 8,             5,      0,      10,  0.1,       113,       62,     0,         1,     4,    1,       0);  
    kHigh.parameter_config    ( 9,             5,      0,      10,  0.1,       170,       62,     0,         1,     4,    1,       0);  
    kEmphasis.button_config   ( 4,             1,      0,       1,   75,        23,              1,    5,    1);
    kEQ.button_config         ( 5,             1,      0,       1,  100,        23,              1,    5,    1);
    kBypass.button_config     ( 6,             1,      1,       0,  125,        23,              1,    5,    1);
    kEQled.button_config      ( 5,             1,      1,       0,   45,        63,            0.5,    6,    1);
    kBypassled.button_config  ( 6,             1,      0,       1,   18,        13,            0.5,    6,    1);

    //.parameter_config      (  ,              ,       ,        ,     ,          ,          ,     0,       1,      ,    1,       0); 
    gfx_r=gfx_b=gfx_g=gfx_a=0.7;   
    kDrive.attached_label("DRIVE",-1, "Arial",10,'b');
    kBias.attached_label("BIAS",-1, "Arial",10,'b');
    kOutput.attached_label("OUT",-1, "Arial",10,'b');
    kLow.attached_label("LOW",-1, "Arial",7,'b');
    kMid.attached_label("MID",-1, "Arial",7,'b');
    kHigh.attached_label("HIGH",-1, "Arial",7,'b');
    kEmphasis.attached_label("EMPH",-4, "Arial",10,'b');
    kEQ.attached_label("EQ",-4, "Arial",10,'b');
    kBypass.attached_label("DRIVE",-4, "Arial",10,'b');
      //gfx_drawstr('yoko');
    //Buttons              (slider     orient  off_val   on_val     x        y           scaling   png  mode) (orient = 0 = horizontal image; orient = 1 = vertical image)
    //.button_config         (  ,              ,       ,        ,       ,        ,              1,      ,    1);

    setup_dmenu("VladG of TDR - Thanx", "1", "Analog Obsession, Tukan Studios, Pitufodelbosque, ReArtist", 0.2); // setup menu, arguments: jsfx name, version, graphics, zoom

    mouse_wheel=0;
  ):gfx_ext_flags == 1 ? ( // embedded mcp ui
    set_background(1 ,0.173,0.29,0.145);
                                    //mode=0 you manually write your code for handling mouse input; mode=1 automatic handling
    //Knobs                   (slider    default     min      max  step         x          y   frames  scaling   png  mode  reverse) (frames = 0 = auto calculate)   (step=0=default floating numbers as step)   
    kDrive.parameter_config   ( 1,             0,    -30,      40,  0.1,         0,        8,     0,         1,     3,    1,       0);  
    kBias.parameter_config    ( 2,             0,    -30,      30,  0.1,        35,        8,     0,         1,     2,    1,       0);  
    kOutput.parameter_config  ( 3,             0,    -15,      15,  0.1,        70,        8,     0,         1,     2,    1,       0);  
    kLow.parameter_config     ( 7,             5,      0,      10,  0.1,         0,       87,     0,       1.2,     4,    1,       0);  
    kMid.parameter_config     ( 8,             5,      0,      10,  0.1,        35,       87,     0,       1.2,     4,    1,       0);  
    kHigh.parameter_config    ( 9,             5,      0,      10,  0.1,        70,       87,     0,       1.2,     4,    1,       0);  
    kEmphasis.button_config   ( 4,             1,      0,       1,    5,        53,            1.5,    5,    1);
    kEQ.button_config         ( 5,             1,      0,       1,   40,        53,            1.5,    5,    1);
    kBypass.button_config     ( 6,             1,      1,       0,   75,        53,            1.5,    5,    1);
    
    gfx_r=gfx_b=gfx_g=gfx_a=0.8;   
    
    kDrive.attached_label("DRIVE",-1, "Arial",17,'b');
    kBias.attached_label("BIAS",-1, "Arial",17,'b');
    kOutput.attached_label("OUT",-1, "Arial",17,'b');

    kLow.attached_label("LOW",-1, "Arial",14,'b');
    kMid.attached_label("MID",-1, "Arial",14,'b');
    kHigh.attached_label("HIGH",-1, "Arial",14,'b');

    kEmphasis.attached_label("EMPH",-4, "Arial",9,'b');
    kEQ.attached_label("EQ",-4, "Arial",9,'b');
    kBypass.attached_label("DRIVE",-4, "Arial",9,'b');
    mouse_wheel=0;
  );
  
  // update parameters
  S2_sample_on == 0 ? (
  gmem[16*64 + 10 + link_group] != 1 ? link_group = 0; // tk extra features
  group_check_gfx(); // tk extra features
    caller == 1 ? (
        parameters_update_on == 0 ? (
          parameters_update();
        );
    );
  );
  S2_sample_on = 0;


