// (C) 2006-2007, Michael Gruhn.

// NO WARRANTY IS GRANTED. THIS PLUG-IN IS PROVIDED ON AN "AS IS" BASIS, WITHOUT
// WARRANTY OF ANY KIND. NO LIABILITY IS GRANTED, INCLUDING, BUT NOT LIMITED TO,
// ANY DIRECT OR INDIRECT,  SPECIAL,  INCIDENTAL OR CONSEQUENTIAL DAMAGE ARISING
// OUT OF  THE  USE  OR INABILITY  TO  USE  THIS PLUG-IN,  COMPUTER FAILTURE  OF
// MALFUNCTION INCLUDED.  THE USE OF THE SOURCE CODE,  EITHER  PARTIALLY  OR  IN
// TOTAL, IS ONLY GRANTED,  IF USED IN THE SENSE OF THE AUTHOR'S INTENTION,  AND
// USED WITH ACKNOWLEDGEMENT OF THE AUTHOR. FURTHERMORE IS THIS PLUG-IN A  THIRD
// PARTY CONTRIBUTION,  EVEN IF INCLUDED IN REAPER(TM),  COCKOS INCORPORATED  OR
// ITS AFFILIATES HAVE NOTHING TO DO WITH IT.  LAST BUT NOT LEAST, BY USING THIS
// PLUG-IN YOU RELINQUISH YOUR CLAIM TO SUE IT'S AUTHOR, AS WELL AS THE CLAIM TO
// ENTRUST SOMEBODY ELSE WITH DOING SO.

desc:Saturation (DD)
//tags: processing amplitude gain saturation
//author: LOSER, ZenoMOD

slider1:50<0,100,1>-Amount (%)

filename:0,DGFX/saturation/bg.png
filename:1,DGFX/saturation/glow.png
filename:2,DGFX/saturation/title.png
filename:3,DGFX/saturation/spotlight.png
filename:4,DGFX/saturation/knob.png
filename:5,DGFX/saturation/bgmcp.png
filename:6,DGFX/saturation/pill.png

// import tukan library
import DGFX/tk_lib_d.jsfx-inc 
options:no_meter
options:gmem=SaturationD

in_pin:left input
in_pin:right input
out_pin:left output
out_pin:right output

@init
    gfx_ext_retina = 1;
    gfx_clear=0;
    lastCap=1;
    mouse_wheel=1;
    Number_input = 0;
    number_input_invalid = 0;
    number_input_x = 0;
    number_input_y=0;
    ext_noinit=1;

    // tk extra features
    lastCap=1;
    mouse_wheel=1;
    is_recording = 0; is_playing = 0; is_stopped = 1;
    !initialized_playstates?(while_playing = while_recording = while_stopped = 1);
    Number_input = 0;
    number_input_raw = 0;
    number_input_use = 0;
    komma = 0;
    in_key = 0;
    number_input_x = 0;
    number_input_y=0;
    number_input_slider = 0;
    number_input_min=0;
    number_input_max=0;
    number_input_invalid = 0;
    number_input_sign=1;
    s2_numbers_of_sliders = 1; // set the number of sliders for gorup linking
    s2_numbers_of_generics = 0;
    group_generics = 0; // fuer group_generics[bis zu 200] <-- ?
    sliders_old = group_generics + 16*200;
    generics_old = sliders_old + 16*64;

    mouse_sensivity();
    function parameters_update() (
        parameters_update_on = 1;
        group_parameters(max_local_buffer_size-64); // tk extra features
        foo = slider1/200*$pi;
        bar = sin(foo);
        // Paste all contents of @slider here
        parameters_update_on = 0;
        caller = 0;
    );
    gfx_clear = 0;
    ext_tail_size = -2;

@slider
  caller = 1;

@block
  cnt=0;
  ddb=0.0;

  db_chg_splpos=slider_next_chg(1, tgtdb);
  db_chg_splpos > 0 ? 
  (
    db=slider2;
  ) : (
    tgtdb = slider2;
    db_chg_splpos = samplesblock;
  );

  ddb=(tgtdb-db)/db_chg_splpos;

@serialize // add this block for tk extra features
  file_var(0, while_playing);
  file_var(0, while_recording);
  file_var(0, while_stopped); file_var(0, zoom_off);
  //file_var(0, LA2Kan_VERSION);
  file_var(0, link_group);
  seriloop = 0;
  loop(64*16 + 27 + 16 +16 +16,
  file_var(0, gmem[seriloop]);
  seriloop += 1;
  );
  seriloop = 0;
  loop(200*16,
  file_var(0, group_generics[seriloop]);
  seriloop += 1;
  );
  
@sample

  S2_sample_on = 1;

  // extra tk features
  gmem[16*64 + 10 + link_group] != 1 ? link_group = 0;
  group_check_smpl();

  caller == 1 ? (
    parameters_update_on == 0 ? (
      parameters_update();
    );
  );

  // extra tk features
  playstates();
  process = 0;
  while_playing ? is_playing ? process = 1;
  while_recording ? is_recording ? process = 1;
  while_stopped ? is_stopped ? process = 1;
  initialized_playstates=1;

  process == 1 && slider1 ? ( // remove this line if not using tk extra features, it means "if jsfx is enabled then do..."
    sat0 = min(max( sin(max(min(spl0,1),-1)*foo)/bar ,-1) ,1);
    sat1 = min(max( sin(max(min(spl1,1),-1)*foo)/bar ,-1) ,1);
    spl0 = sat0 / foo*bar;
    spl1 = sat1 / foo*bar;
  ); // remove this line if not using tk extra features, if using a meter be sure to set the gain reduction value to 0 instead:     ):(grv=0);

<? // @gfx setup
  w_bg=512;
  h_bg=216;
  mcp_ratio="wide";
  include("DGFX/ddconfig.jsfx-inc");
?>
  tk_gfx_setup();
  gfx_ext_flags == 0 ? (  // full ui
    unscaled_factor=1.35;
    set_background(0);
    
                                    //mode=0 you manually write your code for handling mouse input; mode=1 automatic handling
    //Knobs                     (slider    default     min      max  step         x          y   frames  scaling   png  mode  reverse) (frames = 0 = auto calculate)   (step=0=default floating numbers as step)   
    drive.parameter_config      (  1,           50,      0,     100,    1,      103,        25,     0,       0.89,     4,    0,       0);    
    ktube.parameter_config     (  1,           50,      0,     100,    0,       50,         6,    137,          1,     6,    0,       0);    

    // handling Drive
        gfx_x=drive.xIn*zoom; gfx_y=drive.yIn*zoom;
        weg = abs(minVal - maxVal);
        d_isrev==0?(
          kframe = (slider(drive.slider) - drive.minVal) * (drive.frames-1) / (drive.maxVal - drive.minVal);
        ):d_isrev==1?(
          kframe = (drive.maxVal - slider(drive.slider)) * (drive.frames-1) / (drive.maxVal - drive.minVal);
        );
        scry =  drive.kheight* floor(kframe);
        glow_value=(0.4 + ((slider(drive.slider) - drive.minVal) / (drive.maxVal - drive.minVal)) * (1 - 0.4));
        glow_value=vfx_glow.effect_oscillate(glow_value/1.3,glow_value,glow_value/70);
        gfx_a=glow_value;
        gfx_x=drive.xIn*zoom;
        gfx_blit(drive.file, drive.scaling * zoom / 2, 0, 0, scry, drive.size,drive.kheight);
        !Number_input ?(  // if not default handling
          mouseClick == 1 ? (
            drive.k_collision() ? (drive.dragstart());
          ); 
          mouseclick == -1 ? (  // stop knobs dragging
            drive.dragstop();
          );
          d_isrev==0?(
            mouse_wheel ? (  // handle wheel
              drive.k_collision() ? drive.potwheel();
              caller = 1;
            );
            gfx_a=1;  // handle drag
            drive.dragging ? (drive.potdrag();drive.readout();caller = 1;);
          ):d_isrev==1?(
            mouse_wheel ? (  // handle wheel
              drive.k_collision() ? drive.potwheel_rev();
              
              caller = 1;
            );
            gfx_a=1;  // handle drag
            drive.dragging ? (drive.potdrag_rev();drive.readout();caller = 1;);
          );
        );
    // handling left pill
        gfx_x=ktube.xIn*zoom; gfx_y=ktube.yIn*zoom;
        weg = abs(minVal - maxVal);
        kframe = (slider(ktube.slider) - ktube.minVal) * (ktube.frames-1) / (ktube.maxVal - ktube.minVal);
        kframe = max(kframe+vfx_liquid.effect_oscillate(-10,0,0.4),0);
        scry =  ktube.kheight* floor(kframe);
        gfx_a=glow_value;
        gfx_blit(ktube.file, ktube.scaling * zoom / 2, 0, 0, scry, ktube.size,ktube.kheight);
    // handling right pill
        gfx_x=(ktube.xIn+112)*zoom; gfx_y=ktube.yIn*zoom;
        gfx_blit(ktube.file, ktube.scaling * zoom / 2, 0, 0, scry, ktube.size,ktube.kheight);
    input_handling();
    setup_dmenu("LOSER Saturation ZenoMOD", "1", "Analog Obsession, Tukan Studios, Pitufodelbosque, ReArtist", 0.2); // setup menu, arguments: jsfx name, version, graphics, zoom
    mouse_wheel=0;

    //glow
    //vfx_glow.effect_glow(0.4,1,0.01);
    gfx_a=glow_value;
    gfx_x=gfx_y=0;
    gfx_blit(1, 1*zoom/2 , 0);

    //title
    //vfx_title.effect_glow(0.4,1,0.01);
    gfx_a=glow_value^2;
    gfx_x=gfx_y=0;
    gfx_blit(2, zoom/2 , 0);

    //spotlight
    gfx_a=0.8;
    gfx_x=gfx_y=0;
    gfx_blit(3, zoom/2 , 0);

  ):gfx_ext_flags == 1 ? ( // embedded mcp ui  
    set_background(5,0,0,0);
    zoom=zoom*1.5;
                                    //mode=0 you manually write your code for handling mouse input; mode=1 automatic handling
    //Knobs                     (slider    default     min      max  step         x          y   frames  scaling   png  mode  reverse) (frames = 0 = auto calculate)   (step=0=default floating numbers as step)   
    drive.parameter_config      (  1,           50,      0,     100,    1,      43/2,        10,     0,       0.89,     4,    0,       0);    
    ktube.parameter_config     (  1,           50,      0,     100,    0,         -8,        -8,    137,          1,     6,    0,       0);    
    // handling
        gfx_x=drive.xIn*zoom; gfx_y=drive.yIn*zoom;
        weg = abs(minVal - maxVal);
        d_isrev==0?(
          kframe = (slider(drive.slider) - drive.minVal) * (drive.frames-1) / (drive.maxVal - drive.minVal);
        ):d_isrev==1?(
          kframe = (drive.maxVal - slider(drive.slider)) * (drive.frames-1) / (drive.maxVal - drive.minVal);
        );      
        scry =  drive.kheight* floor(kframe);
        glow_value=(0.4 + ((slider(drive.slider) - drive.minVal) / (drive.maxVal - drive.minVal)) * (1 - 0.4));
        gfx_a=glow_value;
        gfx_x=drive.xIn*zoom;
        gfx_blit(drive.file, drive.scaling * zoom / 2, 0, 0, scry, drive.size,drive.kheight);
        !Number_input ?(  // if not default handling
          mouseClick == 1 ? (
            drive.k_collision() ? (drive.dragstart());
          ); 
          mouseclick == -1 ? (  // stop knobs dragging
            drive.dragstop();
          );
          d_isrev==0?(
            mouse_wheel ? (  // handle wheel
              drive.k_collision() ? drive.potwheel();
              
              caller = 1;
            );
            gfx_a=1;  // handle drag
            drive.dragging ? (drive.potdrag();drive.readout();caller = 1;);
          ):d_isrev==1?(
            mouse_wheel ? (  // handle wheel
              drive.k_collision() ? drive.potwheel_rev();
              
              caller = 1;
            );
            gfx_a=1;  // handle drag
            drive.dragging ? (drive.potdrag_rev();drive.readout();caller = 1;);
          );

        );
    // handling left pill
        gfx_x=ktube.xIn*zoom; gfx_y=ktube.yIn*zoom;
        weg = abs(minVal - maxVal);
        kframe = (slider(ktube.slider) - ktube.minVal) * (ktube.frames-1) / (ktube.maxVal - ktube.minVal);
        scry =  ktube.kheight* floor(kframe);
        gfx_a=glow_value;
        gfx_blit(ktube.file, ktube.scaling * zoom / 2, 0, 0, scry, ktube.size,ktube.kheight);
    // handling right pill
        gfx_x=(ktube.xIn+65)*zoom; gfx_y=ktube.yIn*zoom;
        gfx_blit(ktube.file, ktube.scaling * zoom / 2, 0, 0, scry, ktube.size,ktube.kheight);

    input_handling();

    mouse_wheel=0;

    gfx_x=-83*zoom;gfx_y=-10;

    //glow
    //vfx_glow.effect_glow(0.4,1,0.01);
    //gfx_a=glow_value;
    //gfx_blit(1, 1*zoom/2 , 0);

    //spotlight
    gfx_a=0.8;
    gfx_blit(3, zoom/2 , 0);
  );
  
  // update parameters
  S2_sample_on == 0 ? (
  gmem[16*64 + 10 + link_group] != 1 ? link_group = 0; // tk extra features
  group_check_smpl(); // tk extra features
    caller == 1 ? (
        parameters_update_on == 0 ? (
          parameters_update();
        );
    );
  );
  S2_sample_on = 0;

