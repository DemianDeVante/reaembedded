// Copyright 2006, Thomas Scott Stillwell
// All rights reserved.
//
//Redistribution and use in source and binary forms, with or without modification, are permitted 
//provided that the following conditions are met:
//
//Redistributions of source code must retain the above copyright notice, this list of conditions 
//and the following disclaimer. 
//
//Redistributions in binary form must reproduce the above copyright notice, this list of conditions 
//and the following disclaimer in the documentation and/or other materials provided with the distribution. 
//
//The name of Thomas Scott Stillwell may not be used to endorse or 
//promote products derived from this software without specific prior written permission. 
//
//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
//IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND 
//FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS 
//BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
//(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
//PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
//STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
//THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

desc:Fairly Childish (DD)
//tags: dynamics compressor limiter stereo
//author: Stillwell

slider1:0<-60,0,0.1>-L/Lat Threshold (dB)
slider2:0<-60,0,0.1>-R/Vert Threshold (dB)
slider3:70<0,100,0.1>-L/Lat Bias
slider4:70<0,100,0.1>-R/Vert Bias 
slider5:0<-30,30,0.1>-L/Lat Makeup Gain
slider6:0<-30,30,0.1>-R/Vert Makeup Gain
slider7:2<0,3,1{Left/Right (Blown Capacitor),Lat/Vert (Blown Capacitor),Left/Right,Lat/Vert}>-AGC
slider8:1<1,6,1>-L/Lat Time Constant
slider9:1<1,6,1>-R/Vert Time Constant
slider10:100<1,10000,1>-L/Lat RMS Window
slider11:100<1,10000,1>-R/Vert RMS Window
slider12:1<0,1,1>-Power
slider13:0<0,1,1>-Sidechain
//slider13:1<1,50,0.1>L/Lat Current Compression Ratio
//slider14:1<1,50,0.1>R/Vert Current Compression Ratio
//slider15:0<-90,0,0.1>L/Lat Gain Reduction
//slider16:0<-90,0,0.1>R/Vert Gain Reduction

filename:0,DGFX/fairlychildish/bgmcp.png
filename:1,DGFX/fairlychildish/knob.png
filename:2,DGFX/fairlychildish/knob-screw.png
filename:3,DGFX/fairlychildish/button.png
filename:4,DGFX/fairlychildish/meter.png
filename:5,DGFX/fairlychildish/knob-time.png
filename:6,DGFX/fairlychildish/bg-lr.png
filename:7,DGFX/fairlychildish/bg-latvert.png
filename:8,DGFX/fairlychildish/button-agc.png
filename:9,DGFX/fairlychildish/button-lr.png
filename:10,DGFX/fairlychildish/button-latvert.png

import DGFX/tk_lib_d.jsfx-inc 
// vu meter library, skip this line if not using a meter
import DGFX/tk-vu_lib_d.jsfx-inc

options:no_meter
options:gfx_hz=60
// write a cool name to store jsfx memory below
options:gmem=farilychildishd     

// sidechain, bypass, latvert, link, 772 h
// first 3: threshold, gain, time constant
//below: bias, rms
//  
in_pin:left input
in_pin:right input
in_pin:left ext input
in_pin:right ext input
out_pin:left output
out_pin:right output
out_pin:left ext output
out_pin:right ext output
@init
  THISJSFX_VERSION = 1;
  gfx_ext_retina = 1;
  gfx_clear=0;
  lastCap=1;
  mouse_wheel=1;
  Number_input = 0;
  number_input_invalid = 0;
  number_input_x = 0;
  number_input_y=0;
  ext_noinit=1;

  // tk extra features
  lastCap=1;
  mouse_wheel=1;
  is_recording = 0; is_playing = 0; is_stopped = 1;
  while_playing = 1; while_recording = 1; while_stopped = 1;
  Number_input = 0;
  number_input_raw = 0;
  number_input_use = 0;
  komma = 0;
  in_key = 0;
  number_input_x = 0;
  number_input_y=0;
  number_input_slider = 0;
  number_input_min=0;
  number_input_max=0;
  number_input_invalid = 0;
  number_input_sign=1;
  s2_numbers_of_sliders = 13;
  s2_numbers_of_generics = 0;
  group_generics = 0; // fuer group_generics[bis zu 200] <-- ?
  sliders_old = group_generics + 16*200;
  generics_old = sliders_old + 16*64;

  mouse_sensivity();

  ext_tail_size = -1;
  log2db = 8.6858896380650365530225783783321; // 20 / ln(10)
  db2log = 0.11512925464970228420089957273422; // ln(10) / 20 
  i=0;
  lattime=0.0002; //200us
  lreltime=0.300; //300ms
  lrmstime=0.000050; //50us
  lmaxover=0;
  lratio=0;
  lcratio=0;
  lrundb=0;
  loverdb=0;
  lmaxover=0;
  latcoef=exp(-1/(attime * srate));
  lrelcoef=exp(-1/(reltime * srate));
  lrmscoef=exp(-1/(rmstime * srate));
  rattime=0.0002; //200us
  rreltime=0.300; //300ms
  rrmstime=0.000050; //50us
  rmaxover=0;
  rratio=0;
  rcratio=0;
  rrundb=0;
  roverdb=0;
  rmaxover=0;
  ratcoef=exp(-1/(attime * srate));
  rrelcoef=exp(-1/(reltime * srate));
  rrmscoef=exp(-1/(rmstime * srate));
  leftright = 0;
  latvert = 1;

  function parameters_update() (
    parameters_update_on = 1;
    group_parameters(); // tk extra features
    // Paste all contents of @slider here

    agc = slider7&1;
    capsc = (slider7&2) ? log2db : log2db*2.08136898;

    agc == leftright ? (
      lthresh = slider1;
      lthreshv = exp(lthresh * db2log);
      lratio = 20;
      lbias = 80 * slider3 / 100;
      lcthresh = lthresh - lbias;
      lcthreshv = exp(lcthresh * db2log);
      lmakeup = slider5;
      lmakeupv = exp(lmakeup * db2log);
      ltimeconstant = slider8;
      ltimeconstant == 1 ? (
        lattime = 0.0002;
        lreltime = 0.300;
      );
      ltimeconstant == 2 ? (
        lattime = 0.0002;
        lreltime = 0.800;
      );
      ltimeconstant == 3 ? (
        lattime = 0.0004;
        lreltime = 2.000;
      );
      ltimeconstant == 4 ? (
        lattime = 0.0008;
        lreltime = 5.000;
      );
      ltimeconstant == 5 ? (
        lattime = 0.0002;
        lreltime = 10.000;
      );
      ltimeconstant == 6 ? (
        lattime = 0.0004;
        lreltime = 25.000;
      );
      latcoef = exp(-1 / (lattime * srate));
      lrelcoef = exp(-1 / (lreltime * srate));
      
      lrmstime = slider10 / 1000000; 
      lrmscoef=exp(-1/(lrmstime * srate));

      slider2 = slider1;
      slider4 = slider3;
      slider6 = slider5;
      slider9 = slider8;
      slider11 = slider10;
    ) : (
      lthresh = slider1;
      lthreshv = exp(lthresh * db2log);
      lratio = 20;
      lbias = 80 * slider3 / 100;
      lcthresh = lthresh - lbias;
      lcthreshv = exp(lcthresh * db2log);
      lmakeup = slider5;
      lmakeupv = exp(lmakeup * db2log);
      ltimeconstant = slider8;
      ltimeconstant == 1 ? (
        lattime = 0.0002;
        lreltime = 0.300;
      );
      ltimeconstant == 2 ? (
        lattime = 0.0002;
        lreltime = 0.800;
      );
      ltimeconstant == 3 ? (
        lattime = 0.0004;
        lreltime = 2.000;
      );
      ltimeconstant == 4 ? (
        lattime = 0.0008;
        lreltime = 5.000;
      );
      ltimeconstant == 5 ? (
        lattime = 0.0002;
        lreltime = 10.000;
      );
      ltimeconstant == 6 ? (
        lattime = 0.0004;
        lreltime = 25.000;
      );
      latcoef = exp(-1 / (lattime * srate));
      lrelcoef = exp(-1 / (lreltime * srate));
      
      lrmstime = slider10 / 1000000; 
      lrmscoef=exp(-1/(lrmstime * srate));
      rthresh = slider2;
      rthreshv = exp(rthresh * db2log);
      rratio = 20;
      rbias = 80 * slider4 / 100;
      rcthresh = rthresh - rbias;
      rcthreshv = exp(rcthresh * db2log);
      rmakeup = slider6;
      rmakeupv = exp(rmakeup * db2log);
      rtimeconstant = slider9;
      rtimeconstant == 1 ? (
        rattime = 0.0002;
        rreltime = 0.300;
      );
      rtimeconstant == 2 ? (
        rattime = 0.0002;
        rreltime = 0.800;
      );
      rtimeconstant == 3 ? (
        rattime = 0.0004;
        rreltime = 2.000;
      );
      rtimeconstant == 4 ? (
        rattime = 0.0008;
        rreltime = 5.000;
      );
      rtimeconstant == 5 ? (
        rattime = 0.0002;
        rreltime = 10.000;
      );
      rtimeconstant == 6 ? (
        rattime = 0.0004;
        rreltime = 25.000;
      );
      ratcoef = exp(-1 / (rattime * srate));
      rrelcoef = exp(-1 / (rreltime * srate));
      
      rrmstime = slider11 / 1000000; 
      rrmscoef=exp(-1/(rrmstime * srate));

    );
    sidechain=slider13;
    parameters_update_on = 0;
    caller = 0;
  );

  mnmeterspeed=40;
  meter_maxdbtunning=1.27; //-------------------------------------------------------------------------------------------------- adjust needle range
  // skip this 3 lines if not using a gain reduction meter
  GRmeterL.mn_meter_reinit2(mnmeterspeed, meter_maxdbtunning);
  GRmeterR.mn_meter_reinit2(mnmeterspeed, meter_maxdbtunning);

  GRmeterL.mn_meter_init(); // you can change GRmeter with any name you want for multiple meters
  GRmeterR.mn_meter_init(); // you can change GRmeter with any name you want for multiple meters

  //mn_meter_reinit(40);
  //GRmeterL.mn_meter_init();
  //GRmeterR.mn_meter_init();
  slider(ControlPage)=0

@serialize // add this block for tk extra features
  file_var(0, while_playing);
  file_var(0, while_recording);
  file_var(0, while_stopped);
  file_var(0, LA2Kan_VERSION);
  file_var(0, link_group);
  seriloop = 0;
  loop(64*16 + 27 + 16,
  file_var(0, gmem[seriloop]);
  seriloop += 1;
  );
  seriloop = 0;
  loop(200*16,
  file_var(0, group_generics[seriloop]);
  seriloop += 1;
  );

@slider
  caller = 1;

@block     // add the following lines at the start of @block if you'll use a gain reduction meter
  //srate != srate_old ? (GRmeter.mn_meter_init();   mn_meter_reinit(meterspeed76); caller = 1);
  srate != srate_old ? (
    GRmeterL.mn_meter_init(); GRmeterR.mn_meter_init();   
    GRmeterL.mn_meter_reinit2(mnmeterspeed, meter_maxdbtunning); GRmeterR.mn_meter_reinit2(mnmeterspeed, meter_maxdbtunning); 
    caller = 1;
  );
  srate_old = srate;

@sample

  S2_sample_on = 1;

  // extra tk features
  gmem[16*64 + 10 + link_group] != 1 ? link_group = 0;
  group_check_smpl();

  caller == 1 ? (
    parameters_update_on == 0 ? (
      parameters_update();
    );
  );

  // extra tk features
  playstates();
  process = 0;
  while_playing ? is_playing ? process = 1;
  while_recording ? is_recording ? process = 1;
  while_stopped ? is_stopped ? process = 1;
  slider12==0?(process=0);
  process == 1 ? (
    //slider8=floor(slider8+0.5);
    //slider9=floor(slider9+0.5);
    agc == leftright ? (
      sidechain==0?(aspl0=abs(spl0);aspl1=abs(spl1)):sidechain==1?(aspl0=abs(spl2);aspl1=abs(spl3));
      //aspl0 = abs(spl0);
      //aspl1 = abs(spl1);
      lmaxspl = max(aspl0, aspl1);
      lmaxspl = lmaxspl * lmaxspl;

      lrunave = lmaxspl + lrmscoef * (lrunave - lmaxspl);
      ldet = sqrt(max(0,lrunave));

      loverdb = capsc * log(ldet/lthreshv);
      loverdb = max(0,loverdb);

      loverdb > lrundb ? (
        lrundb = loverdb + latcoef * (lrundb - loverdb);
      ) : (
        lrundb = loverdb + lrelcoef * (lrundb - loverdb);
      );
      loverdb = max(lrundb,0);

      lbias == 0 ? (
        lcratio = lratio;
      ) : (
        lcratio = 1 + (lratio-1) * sqrt((loverdb + dcoffset) / (lbias + dcoffset));
      );
      //slider13 = lcratio;
      //slider14 = lcratio;
    
      lgr = -loverdb * (lcratio-1)/lcratio;
      //slider15 = -lgr;
      //slider16 = -lgr;
      lgrv = exp(lgr * db2log);
    
    ) : (  
      //aspl0 = abs(spl0+spl1)/2;
      //aspl1 = abs(spl0-spl1)/2;
      sidechain==0?(aspl0=abs(spl0);aspl1=abs(spl1)):sidechain==1?(aspl0=abs(spl2);aspl1=abs(spl3));
      lmaxspl = aspl0;
      lmaxspl = lmaxspl * lmaxspl;

      lrunave = lmaxspl + lrmscoef * (lrunave - lmaxspl);
      ldet = sqrt(max(0,lrunave));

      loverdb = capsc * log(ldet/lthreshv);
      loverdb = max(0,loverdb);

      loverdb > lrundb ? (
        lrundb = loverdb + latcoef * (lrundb - loverdb);
      ) : (
        lrundb = loverdb + lrelcoef * (lrundb - loverdb);
      );
      loverdb = max(lrundb,0);

      lbias == 0 ? (
        lcratio = lratio;
      ) : (
        lcratio = 1 + (lratio-1) * sqrt((loverdb + dcoffset) / (lbias + dcoffset));
      );

      rmaxspl = aspl1;
      rmaxspl = rmaxspl * rmaxspl;

      rrunave = rmaxspl + rrmscoef * (rrunave - rmaxspl);
      rdet = sqrt(max(0,rrunave));

      roverdb = capsc * log(rdet/rthreshv);
      roverdb = max(0,roverdb);

      roverdb > rrundb ? (
        rrundb = roverdb + ratcoef * (rrundb - roverdb);
      ) : (
        rrundb = roverdb + rrelcoef * (rrundb - roverdb);
      );
      roverdb = max(rrundb,0);

      rbias == 0 ? (
        rcratio = rratio;
      ) : (
        rcratio = 1 + (rratio-1) * sqrt((roverdb + dcoffset) / (rbias + dcoffset));
      );

      //slider13 = lcratio;
      //slider14 = rcratio;
    
      lgr = -loverdb * (lcratio-1)/lcratio;
      rgr = -roverdb * (rcratio-1)/rcratio;
      //slider15 = -lgr;
      //slider16 = -rgr;
      lgrv = exp(lgr * db2log);
      rgrv = exp(rgr * db2log);
    
    );
    ext_gr_meter = lgr;

    agc == leftright ? (
      spl0 *= lgrv * lmakeupv;
      spl1 *= lgrv * lmakeupv;
      //GRmeterL.mnmetersample(lgrv*db2ratio(-3.9)); //3.7 
      //GRmeterR.mnmetersample(lgrv*db2ratio(-3.9)); //3.7 
      GRmeterL.gr_mnmetersample(lgrv); //3.7 
      GRmeterR.gr_mnmetersample(lgrv); //3.7 
    ) : (
      sav0 = (spl0 + spl1) * lgrv;
      sav1 = (spl0 - spl1) * rgrv;
      sav0 *= lmakeupv;
      sav1 *= rmakeupv;
      spl0 = (sav0 + sav1) * 0.5;
      spl1 = (sav0 - sav1) * 0.5;
      //GRmeterL.mnmetersample(lgrv*db2ratio(-3.9)); //3.7 
      //GRmeterR.mnmetersample(rgrv*db2ratio(-3.9)); //3.7 
      GRmeterL.gr_mnmetersample(lgrv); //3.7 
      GRmeterR.gr_mnmetersample(rgrv); //3.7 
    );
  ):(GRmeterL.mnmetersample(0);GRmeterR.mnmetersample(0)); //3.7);
// ----------------- GRAPHICS -----------------

//full  1501   835                   // full ui background dimensions
//mcp    507   627                   // mcp version background dimensions
//win    489   gfx_h                 // windows minimum width (and macOS maybe)
//lin    619   gfx_h                 // linux minimum width
// gfx_h= full_h * os_w / full_w 
// gfx_w = gfx_h*mcp_w/mcp/h         // around this value for some reason the mcp aspect ratio is a bit taller

@gfx 230 273 // windows
//@gfx 290 345 // linux
  tk_gfx_setup();
  dmeterbias=1.2; //-------------------------------------------------------------------------------------------------- adjust needle bias
  dmeterdegreel=38;
  dmeterdegreer=109;
  dmeterneedlestart=0.2;
  dmeterneedleend=0.98;
  gfx_ext_flags == 0 ? (  // full ui

    slider7==0|2?( // left/right
      set_background(6);
    ):slider7==1|3?(     // mid/side
      set_background(7);
    );
    //GRmeterR.draw_meter(925/2, 401/2, 1.03, 4); //draw meter x, y, zoom, png   
    //GRmeterL.draw_meter(925/2, 59/2, 1.03, 4); //draw meter x, y, zoom, png
    GRmeterR.draw_meter2(4, 925/2, 401/2, 1.03, 1, 1, dmeterneedlestart, dmeterneedleend, dmeterdegreel, dmeterdegreer, 0, dmeterbias); //draw meter png, x, y, zoom, x_center_offset, y_center_offset, needle_line_start, needle_line_end, leftmostDegree, rightmostDegree, dblimit, needlebias        --remove this line if not using a meter
    GRmeterL.draw_meter2(4, 925/2, 59/2, 1.03, 1, 1, dmeterneedlestart, dmeterneedleend, dmeterdegreel, dmeterdegreer, 0, dmeterbias); //draw meter png, x, y, zoom, x_center_offset, y_center_offset, needle_line_start, needle_line_end, leftmostDegree, rightmostDegree, dblimit, needlebias        --remove this line if not using a meter

                                    //mode=0 you manually write your code for handling mouse input; mode=1 automatic handling
    //Knobs                           (slider    default     min      max step   x        y   frames  scaling  file  mode  reverse) (frames = 0 = auto calculate)      
    //.parameter_config      (  ,              ,       ,        ,       ,        ,     0,       1,      ,    1,       0);    
    kThresholdL.parameter_config      ( 1,             0,    -60,       0,  0,   87,      67,     0,       1,     1,    1,       0);    
    kTimeL.parameter_config           ( 8,             1,      1,       6,  1,  198,      53,     0,       2,     5,    1,       0);    
    kGainL.parameter_config           ( 5,             0,    -30,      30,  0,  334,      67,     0,       1,     1,    1,       0);    
    kBiasL.parameter_config           ( 3,            70,      0,     100,  0,  516,     144,     0,       1,     2,    1,       0);    
    kRMSL.parameter_config            (10,           100,      1,    1000,  0,  576,     144,     0,       1,     2,    1,       0);    
    g_down_offset=173;
    kThresholdR.parameter_config      ( 2,             0,    -60,       0,  0,   87,      67+g_down_offset,     0,       1,     1,    1,       0);    
    kTimeR.parameter_config           ( 9,             1,      1,       6,  1,  197,      52+g_down_offset,     0,       2,     5,    1,       0);    
    kGainR.parameter_config           ( 6,             0,    -30,      30,  0,  334,      67+g_down_offset,     0,       1,     1,    1,       0);    
    kBiasR.parameter_config           ( 4,            70,      0,     100,  0,  516,     144+g_down_offset,     0,       1,     2,    1,       0);    
    kRMSR.parameter_config            (11,           100,      1,    1000,  0,  576,     144+g_down_offset,     0,       1,     2,    1,       0);  
    //Buttons              (slider     orient  off_val   on_val     x        y           scaling  file  mode) (orient = 0 = horizontal image; orient = 1 = vertical image)
    //.button_config         (  ,              ,       ,        ,       ,        ,              1,      ,    1);
    g_x_offset=134;
    LV.button_config       ( 7,             1,      3,       3,    294+g_x_offset,     370,              1,     3,    1);
    LR.button_config       ( 7,             1,      2,       2,    238+g_x_offset,     370,              1,     3,    1);
    Ext.button_config      (13,             1,      0,       1,    379+g_x_offset,     370,              1,     3,    1);
    Power.button_config    (12,             1,      0,       1,    442+g_x_offset,     370,              1,     3,    1);
    setup_dmenu("Stillwell Fairly Childish", "1", "Analog Obsession, Tukan Studios, Pitufodelbosque, ReArtist", 0.6); // setup menu, arguments: jsfx name, version, graphics, zoom

    mouse_wheel=0;
  ):gfx_ext_flags == 1 ? ( // embedded mcp ui
    set_background(0,0.125,0.129,0.118);

    //AGC abutton and Set png for Page Selector
    AGC.button_config       ( 7,             1,      2,       3,    381/2,     237/2,              1,     8,    1);
    slider7==0|2?( // left/right
      agc_png_id=9; // use l r png button
    ):slider7==1|3?(     // mid/side
      agc_png_id=10; // use m s png button
    );

    // Page Selector
    SelectedControl.button_config       ( ControlPage,             1,      0,       1,    32/2,     237/2,              1,     agc_png_id,    1);

    slider(ControlPage)==0?( // If page 1 is selected (left or lat) show page 1 knobs
      //GRmeterL.draw_meter(66/2, 3/2, 1.03, 4); //draw meter x, y, zoom, png   
      GRmeterL.draw_meter2(4, 66/2, 3/2, 1.03, 1, 1, dmeterneedlestart, dmeterneedleend, dmeterdegreel, dmeterdegreer, 0, dmeterbias); //draw meter png, x, y, zoom, x_center_offset, y_center_offset, needle_line_start, needle_line_end, leftmostDegree, rightmostDegree, dblimit, needlebias        --remove this line if not using a meter


      kThresholdL.parameter_config      ( 1,             0,    -60,       0,  0,   14/2,      365/2,     0,       1,     1,    1,       0);    
      kTimeL.parameter_config           ( 8,             1,      1,       6,  1,  155/2,      290/2,     0,       2,     5,    1,       0);    
      kGainL.parameter_config           ( 5,             0,    -30,      30,  0,  350/2,      365/2,     0,       1,     1,    1,       0);    
      kBiasL.parameter_config           ( 3,            70,      0,     100,  0,  162/2,     228/2,     0,       1,     2,    1,       0);    
      kRMSL.parameter_config            (10,           100,      1,    1000,  0,  282/2,     228/2,     0,       1,     2,    1,       0);     
    ):(  // If page 2 is selected (right or vert) show page 2 knobs
      //GRmeterR.draw_meter(66/2, 3/2, 1.03, 4); //draw meter x, y, zoom, png  
      GRmeterR.draw_meter2(4, 66/2, 3/2, 1.03, 1, 1, dmeterneedlestart, dmeterneedleend, dmeterdegreel, dmeterdegreer, 0, dmeterbias); //draw meter png, x, y, zoom, x_center_offset, y_center_offset, needle_line_start, needle_line_end, leftmostDegree, rightmostDegree, dblimit, needlebias        --remove this line if not using a meter

      kThresholdR.parameter_config      ( 2,             0,    -60,       0,  0,   14/2,      365/2,     0,       1,     1,    1,       0);    
      kTimeR.parameter_config           ( 9,             1,      1,       6,  1,  155/2,      290/2,     0,       2,     5,    1,       0);    
      kGainR.parameter_config           ( 6,             0,    -30,      30,  0,  350/2,      365/2,     0,       1,     1,    1,       0);    
      kBiasR.parameter_config           ( 4,            70,      0,     100,  0,  162/2,     228/2,     0,       1,     2,    1,       0);    
      kRMSR.parameter_config            (11,           100,      1,    1000,  0,  282/2,     228/2,     0,       1,     2,    1,       0); 
    );

    Ext.button_config      (13,             1,      0,       1,    149/2,     545/2,              1,     3,    1);
    Power.button_config    (12,             1,      0,       1,    275/2,     545/2,              1,     3,    1);

  );

  // update parameters
  S2_sample_on == 0 ? (
  gmem[16*64 + 10 + link_group] != 1 ? link_group = 0; // tk extra features
  group_check_gfx(); // tk extra features
    caller == 1 ? (
        parameters_update_on == 0 ? (
          parameters_update();
        );
    );
  );
  S2_sample_on = 0;
