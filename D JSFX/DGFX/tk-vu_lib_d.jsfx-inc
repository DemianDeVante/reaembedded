desc:tukans VU library demian d mod


@init

function mn_meter_reinit(speed_) (
this.cosp = 0;
this.dbL = -130;
this.force = 0;
this.mnblitscale = 0;
this.mnmeterpng = -1;
this.nd_posL = this.nd_posL = 0;
this.nd_SpeedL = 0;
this.ph = 0;
this.r1 = 0;
this.scnt = 0;
this.sinP = 0;
this.smpLL = 0;
this.w1 = this.w2 = this.x1 = this.x2 = this.xa = this.xd = this.xw = this.y1 = this.y2 = this.ya = this.yd = this.yw = 0;

//mn_Meter_speed = 61;
mn_meter_speed = speed_;
mn_Meter_fact_up = 10 ^ (( 0 - 10)/20) * 0.3785;
mn_Meter_mom = 0.00010 + 0.00032 *  mn_Meter_speed^3 / 125000;
mn_Meter_dt = 10 / srate;
mn_Meter_offset = 0.0074;
mn_meter_damp = 1 - 0.005 * (48000 / srate);

GR_mn_meter_speed = 40;
GR_mn_Meter_fact_up = 10 ^ (( 0 - 10)/20) * 0.3785;
GR_mn_Meter_mom = 0.00010 + 0.00032 *  GR_mn_Meter_speed^3 / 125000;
GR_mn_Meter_dt = 10 / srate;
GR_mn_Meter_offset = 0.0074;
GR_mn_meter_damp = 1 - 0.005 * (48000 / srate);
);

function mn_meter_reinit2(speed_ maxdb_tunning) (
  this.cosp = 0;
  this.dbL = -130;
  this.force = 0;
  this.mnblitscale = 0;
  this.mnmeterpng = -1;
  this.nd_posL = this.nd_posL = 0;
  this.nd_SpeedL = 0;
  this.ph = 0;
  this.r1 = 0;
  this.scnt = 0;
  this.sinP = 0;
  this.smpLL = 0;
  this.w1 = this.w2 = this.x1 = this.x2 = this.xa = this.xd = this.xw = this.y1 = this.y2 = this.ya = this.yd = this.yw = 0;

  //mn_Meter_speed = 61;
  mn_meter_speed = speed_;
  mn_Meter_fact_up = 10 ^ (( 0 - 10)/20) * 0.3790;
  mn_Meter_mom = 0.00010 + 0.00032 *  mn_Meter_speed^3 / 125000;
  mn_Meter_dt = 10 / srate;
  mn_Meter_offset = 0.0074; //-----------------------------------------------------------------  bias  0.0200 is a good value
  mn_meter_damp = 1 - 0.005 * (48000 / srate); 
  GR_mn_meter_speed = 40;

  gr_mn_meter_fact_up_multiplier=0.3790;//0.3790;
  GR_mn_Meter_fact_up = 10 ^ (( 0 - 10)/20) * 0.3790;

  GR_mn_Meter_mom = 0.00010 + 0.00032 *  GR_mn_Meter_speed^3 / 125000;
  GR_mn_Meter_dt = 10 / srate;

  gr_mn_meter_offset_multiplier=GR_mn_Meter_fact_up/(GR_mn_Meter_fact_up/0.0215*maxdb_tunning);//--------------------------------------------------- around ~-15 db limit
  GR_mn_Meter_offset = gr_mn_meter_offset_multiplier; 

  GR_mn_meter_damp = 1 - 0.005 * (48000 / srate);
);

function mnMetersample(meterIn) //Mom = speed
(

this.smpL = abs(MeterIn);
 
this.scnt += 1;


this.scnt === 10 ? (
    
  // move needle
  
    this.force = this.smpL * mn_Meter_fact_up  -  (this.nd_posL * .1 + mn_Meter_offset);
    
    this.nd_SpeedL += this.force * mn_Meter_dt / mn_Meter_mom;  
    this.nd_SpeedL = this.nd_SpeedL * mn_meter_damp;
    this.nd_posL += this.nd_SpeedL * mn_Meter_dt;
    this.nd_posL < 0 || this.nd_posL > 1 ? this.nd_SpeedL = 0;
  
    this.nd_posL = min(max(this.nd_posL,0),1);
  
    this.scnt = 0;
  
);
);


function GR_mnMetersample(meterIn) //Mom = speed
(

this.smpL = abs(MeterIn);
 
this.scnt += 1;


this.scnt === 10 ? (
    
  // move needle
  
    this.force = this.smpL * GR_mn_Meter_fact_up  -  (this.nd_posL * .1 + GR_mn_Meter_offset);
    this.force = this.force*1;
    this.nd_SpeedL += this.force * GR_mn_Meter_dt / GR_mn_Meter_mom;  
    this.nd_SpeedL = this.nd_SpeedL * GR_mn_Meter_damp;
    this.nd_posL += this.nd_SpeedL * GR_mn_Meter_dt;
    this.nd_posL < 0 || this.nd_posL > 1 ? this.nd_SpeedL = 0;
  
    this.nd_posL = min(max(this.nd_posL,0),1);
  
    this.scnt = 0;
  
);
);


function mn_meter_init () (
this.cosp = 0;
this.dbL = -130;
this.force = 0;
this.mnblitscale = 0;
this.mnmeterpng = -1;
this.nd_posL = this.nd_posL = 0;
this.nd_SpeedL = 0;
this.ph = 0;
this.r1 = 0;
this.scnt = 0;
this.sinP = 0;
this.smpLL = 0;
this.w1 = this.w2 = this.x1 = this.x2 = this.xa = this.xd = this.xw = this.y1 = this.y2 = this.ya = this.yd = this.yw = 0;
);

function mnmetergfx(mnmeterscale, mnmeterx, mnmetery, mnmeterpng) local (linestep d_btn_w d_btn_h d_imgscale) ( //(0=flexible, x,y,redneedle, channel 1or2) 

  gfx_getimgdim(mnmeterpng, d_btn_w, d_btn_h);
  d_btn_w == 382 ? (d_imgscale=1):(d_imgscale=382/d_btn_w);
  this.nd_posL_g = this.nd_posL;

  this.dbL = (this.nd_posL_g * 23) - 20;
  this.mnmeterpng = mnmeterpng;
    
  gfx_a = 1; gfx_x = mnmeterx; gfx_y=mnmetery;
  
  mnmeterscale == 0 ? (this.mnblitscale = gfx_w/190):(this.mnblitscale = mnmeterscale);
  gfx_a = 1;
  this.mnmeterpng >= 0 ? gfx_blit(this.mnmeterpng,this.mnblitscale / 2*d_imgscale,0);
  gfx_a = 1;

  this.w1 = $pi * 16.5 / 180; 
  this.w2 = $pi * 45 / 180;

  this.xw = 190*this.mnblitscale; //max(1,floor((gfx_w-30) / 2));
  this.yw = 92*this.mnblitscale;//floor(this.xw / 1.5);

  this.r1 = 130*this.mnblitscale;//floor(this.yw * 0.85);



  this.xd = 10;// + chan*(this.xw+10);
    
  this.yd = 10;

  this.xa = this.mnblitscale*190/2;//gfx_w/2;//floor(this.xd + this.xw / 2);
  this.ya = floor(this.yd + this.yw * 1.1);


  this.ph = this.dbL;
  this.ph = 51.5 + (this.ph+20.1)/23*83;//51 + (this.ph+20)/23*83

  this.r1 = this.mnblitscale*(80+abs((90 - abs(this.ph)))/5);
  
  this.ph = this.ph * ($pi / 180);
    
  this.cosp = cos(this.ph);
  this.sinP = sin(this.ph);
    
  this.ya = mnmetery+110*this.mnblitscale;
  this.xa = mnmeterx+(190*this.mnblitscale/2);//-(gfx_w/50);
  this.x1 = this.xa - this.cosp * this.r1 * 0.25;
  this.y1 = this.ya - this.sinP * this.r1 * 0.25;

  this.x2 = this.xa - this.cosp * this.r1 * 1.1;
  this.y2 = this.ya - this.sinP * this.r1 * 1.1;

  gfx_x = this.x1;
  gfx_y = this.y1; 
  gfx_lineto(this.x2, this.y2);
  this.mnblitscale > 1 ? (
    linestep = 0;
    loop(this.mnblitscale * 2,
      linestep += 0.25;
      gfx_line(this.x1+linestep,this.y1,this.x2+linestep,this.y2);
    );
  );
    
  gfx_a = 0.3;
  gfx_x = this.x1-2;
  gfx_y = this.y1; 
  gfx_lineto(this.x2- 2, this.y2);
  gfx_a = 1;
);

function mnmetergfx2(mnmeterpng, mnmeterscale, mnmeterx, mnmetery, x_center_offset, y_center_offset, needle_line_start, needle_line_end, leftmostDegree, rightmostDegree, wall_offset, dn_bias) local (linestep d_btn_w d_btn_h d_imgscale) (//(0=flexible, x,y,redneedle, channel 1or2)
 
  gfx_getimgdim(mnmeterpng, d_btn_w, d_btn_h);
  d_btn_w == 382 ? (d_imgscale=1):(d_imgscale=382/d_btn_w);
  this.nd_posL_g =this.nd_posL;
  //this.nd_posL_g =0;
  dn_pos=this.nd_posL_g*db2ratio(wall_offset);
  dn_pos=dn_pos^dn_bias;    // bias <1= more focus to lower values; bias >1= more focus to higher values

  this.dbL = ((dn_pos) * 23) - 20; // ------------------------------------------------------
  this.mnmeterpng = mnmeterpng;
    
  gfx_a = 1; gfx_x = mnmeterx; gfx_y=mnmetery;
  
  mnmeterscale == 0 ? (this.mnblitscale = gfx_w/190):(this.mnblitscale = mnmeterscale);
  gfx_a = 1;
  this.mnmeterpng >= 0 ? gfx_blit(this.mnmeterpng,this.mnblitscale / 2*d_imgscale,0);
  gfx_a = 1;

  this.w1 = $pi * 16.5 / 180; 
  this.w2 = $pi * 45 / 180;

  this.xw = 190*this.mnblitscale; //max(1,floor((gfx_w-30) / 2));
  this.yw = 92*this.mnblitscale;//floor(this.xw / 1.5);

  this.r1 = 130*this.mnblitscale;//floor(this.yw * 0.85);



  this.xd = 10;// + chan*(this.xw+10);
    
  this.yd = 10;

  this.xa = this.mnblitscale*190/2;//gfx_w/2;//floor(this.xd + this.xw / 2);
  this.ya = floor(this.yd + this.yw * 1.1);

  this.ph = this.dbL;
  this.ph = leftmostDegree + (this.ph + 20.1) / 23 * (rightmostDegree - leftmostDegree);
  //this.ph = 51.5 + (this.ph+20.1)/23*83;//51 + (this.ph+20)/23*83 ---------------------- first = db range; last = needle movement range

  this.r1 = this.mnblitscale*(80+abs((90 - abs(this.ph)))/5);
  
  this.ph = this.ph * ($pi / 180); // -------------------------------------------------------- degree range 180 default
    
  this.cosp = cos(this.ph);
  this.sinP = sin(this.ph);
    
  this.ya = mnmetery+(110*y_center_offset)*this.mnblitscale;         // --------------------------------------------------- y offset mnmetery+110
  this.xa = mnmeterx+((190*x_center_offset)*this.mnblitscale/2);// -(gfx_w/50); ------------------------------------------- x offset   190
  this.x1 = this.xa - this.cosp * this.r1 * needle_line_start;  // -------------------------------------------- needle start center
  this.y1 = this.ya - this.sinP * this.r1 * needle_line_start;  // -------------------------------------------- needle start center

  this.x2 = this.xa - this.cosp * this.r1 * needle_line_end;   // -------------------------------------------- needle length
  this.y2 = this.ya - this.sinP * this.r1 * needle_line_end;   // -------------------------------------------- needle length

  gfx_x = this.x1;
  gfx_y = this.y1; 
  gfx_lineto(this.x2, this.y2);
  this.mnblitscale > 1 ? (
    linestep = 0;
    loop(this.mnblitscale * 2,
      linestep += 0.25;
      gfx_line(this.x1+linestep,this.y1,this.x2+linestep,this.y2);
    );
  );
    
  gfx_a = 0.3;
  gfx_x = this.x1-2;
  gfx_y = this.y1; 
  gfx_lineto(this.x2- 2, this.y2);
  gfx_a = 1;
);

function draw_meter(d_gr_meter_x d_gr_meter_y d_gr_meter_zoom d_png) local(d_gr_meter_x d_gr_meter_y d_gr_meter_zoom d_png) (
    gfx_r = 0; gfx_b = 0; gfx_g = 0;
    this.mnmetergfx(d_gr_meter_zoom*zoom, d_gr_meter_x*zoom, d_gr_meter_y*zoom, d_png); // meter position and scaling  scaling/x/y/png
);

function draw_meter2(d_png d_gr_meter_x d_gr_meter_y d_gr_meter_zoom x_center_offset y_center_offset needle_line_start needle_line_end leftmostDegree rightmostDegree wall_offset dn_bias) local(d_gr_meter_x d_gr_meter_y d_gr_meter_zoom d_png) (
    gfx_r = 0; gfx_b = 0; gfx_g = 0;
    this.mnmetergfx2(d_png, d_gr_meter_zoom*zoom, d_gr_meter_x*zoom, d_gr_meter_y*zoom, x_center_offset, y_center_offset, needle_line_start, needle_line_end, leftmostDegree, rightmostDegree, wall_offset, dn_bias); // meter position and scaling  scaling/x/y/png
);

	function dem_gr_meter_vertical(gr_meter x_pos meter_width) (
		//color
		gfx_r = 0.7; gfx_g = 0.7; gfx_b = 0; gfx_a = 0.8;
		// gr meter
		gr_meter *= exp(1/30); 
		gr_meter > 1 ? gr_meter = 1 : null; // Decay meter here so if the audio processing stops it doesn't "stick"

		meter_bot = 20; // scaling
		meter_w = min(gfx_w, meter_width * zoom); // width
		yscale = gfx_h * 20 / meter_bot;

		gfx_x = x_pos*zoom; // x position
		gfx_y = gfx_h + log10(gr_meter) * yscale;
		gfx_rectto(meter_w+gfx_x, gfx_h);
		// The meter is now vertical
	);

function barmeter_hor(grvalue grm_y grm_h grm_x grm_w grcolor) (
  gfx_r=1; gfx_g=gfx_b=0; gfx_a=0.8; // red color
  //bar
  grvalue *= exp(1/30); grvalue>1?grvalue=1; // decay meter here so if the audio processing stops it doesnt "stick"
  grm_y=grm_y*zoom;
  grm_h=grm_h*zoom;
  grm_x=grm_x*zoom;
  grm_w=grm_w*zoom;
  meter_bot=20;
  meter_h=grm_y+grm_h;
  xscale=grm_w*20/meter_bot; // width*20...
  gfx_y=grm_y;
  gfx_x=grm_x; // right limit
  gfx_rectto(max(grm_x-grm_w, grm_x + log10(grvalue)*xscale),meter_h); //right limit + log...
  //lines

  gfx_r=gfx_g=gfx_b=1.0; gfx_a=0.6;

  grcolor==1?gfx_r=gfx_g=gfx_b=0;

  gfx_y=grm_y;
  gfx_x=grm_x; // right limit
  gfx_lineto(gfx_x,meter_h,0);
  s2=sqrt(2)/2;
  g = s2;
  while(
    gfx_x=grm_x + log10(g)*xscale;
    gfx_x >= grm_x-grm_w  ? 
    (
      gfx_y=grm_y;
      gfx_lineto(gfx_x,meter_h,0);
      gfx_y=meter_h;
      gfx_x+=2;
      //gfx_drawnumber(log10(g)*20,0);
      //gfx_drawchar($'d');
      //gfx_drawchar($'B');
    );
    g*=s2;
    gfx_x >=grm_x-grm_w ;
  );
  //one last line at the start of meter
      gfx_y=grm_y;
      gfx_x=grm_x-grm_w;
      gfx_lineto(gfx_x,meter_h,0);
      gfx_y=meter_h;
  gfx_a=1;
/*
  gfx_x=0; gfx_y=meter_h/2 - gfx_texth/2;
  gfx_drawnumber(log10(gr_meter)*20,1);
  gfx_drawchar($'d');
  gfx_drawchar($'B');
*/
);