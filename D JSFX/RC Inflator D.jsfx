desc:RC Inflator (DD)
/*
author: chmaha
about:
  The "Oxford" setting clones the behavior of the Sonnox Oxford Inflator in every aspect including "bandsplit" mode. 
  The "ideal" setting improves the behavior further by omitting the odd quirks found in the original Sonnox plug-in. 
  DSP by lewloiwc
  https://github.com/ReaTeam/JSFX/blob/master/Distortion/RCInflator2_Oxford.jsfx
  https://github.com/ReaTeam/JSFX/blob/master/Distortion/RCInflator2_Ideal.jsfx
  Both improve upon the original RCInflator (Oxford Edition) by RCJacH with additions by sai'ke and chmaha.
  https://github.com/ReaTeam/JSFX/blob/master/Distortion/rcjach_RCInflator.jsfx
  For discussion see https://forum.cockos.com/showthread.php?t=256286.
  This combined version released under GPLv3 license

*/
slider1:setting=0<0,1,1{Oxford,Ideal}>-Edition
slider2:input_slider=0<-6,12,0.01>-Input (dB)
slider3:effect_slider=0<0,100,0.1>-Effect (%)
slider4:curve_slider=0<-50,50,0.1>-Curve
slider5:clip_slider=1<0,1,1{Off,On}>-Clip 0 dB
slider6:band_split_slider=0<0,1,1{Off,On}>-Band Split
slider7:effect_in_slider=1<0,1,1{Off,On}>-Effect In
slider8:output_slider=0<-12,0,0.01>-Output (dB)

in_pin:Input L
in_pin:Input R
out_pin:Output L
out_pin:Output R

import DGFX/tk_lib_d.jsfx-inc 

options:gmem=rcinflatorD     
options:no_meter

filename:0,DGFX/rcinflator/bg.png
filename:1,DGFX/rcinflator/bgmcp.png
filename:2,DGFX/rcinflator/button.png
filename:3,DGFX/rcinflator/knob-red.png
filename:4,DGFX/rcinflator/knob-white.png

@init
  gfx_ext_retina = 1;
  gfx_clear=0;
  lastCap=1;
  mouse_wheel=1;
  Number_input = 0;
  number_input_invalid = 0;
  number_input_x = 0;
  number_input_y=0;
  ext_noinit=1;

  // tk extra features
  lastCap=1;
  mouse_wheel=1;
  is_recording = 0; is_playing = 0; is_stopped = 1;
  !initialized_playstates?(while_playing = while_recording = while_stopped = 1);
  Number_input = 0;
  number_input_raw = 0;
  number_input_use = 0;
  komma = 0;
  in_key = 0;
  number_input_x = 0;
  number_input_y=0;
  number_input_slider = 0;
  number_input_min=0;
  number_input_max=0;
  number_input_invalid = 0;
  number_input_sign=1;
  s2_numbers_of_sliders = 8; // set the number of sliders for gorup linking

  mouse_sensivity();
    ext_nodenorm = 1;

    function clamp(x,min,max)
    (
        x < min ? min : x > max ? max : x;
    );

    function SVFOP_set(cutoff)
    (
        this.c = tan($pi*(cutoff/srate - 0.25))*0.5 + 0.5;
    );

    function SVFOPlpf(x)
    instance(
        c,i
    )
    (
        x = i + c*(x - i);
        i = 2*x - i;
        x;
    );

    function SVFOPhpf(x)
    instance(
        c,r,i
    )
    (
        r = (1 - c)*i + c*x;
        i = 2*r - i;
        x - r;
    );

    function band_split_set(xA,xB)
    (
        //Low
            this.A.SVFOP_set(xA);
        //High
            this.B.SVFOP_set(xB);
        //Mid
            this.gain = this.B.c*(1 - this.A.c)/(this.B.c - this.A.c);
            this.gain_div = 1/this.gain;
    );

    function band_split(x)
    (
        //Low
            this.L = this.A.SVFOPlpf(x);
        //High
            this.H = this.B.SVFOPhpf(x);
        //Mid
            this.M = x - this.L - this.H;
    );

    function waveshaper(x)
    local(
        y
    )
    (
        (
            (y = abs(x)) < 1 ? (
                A*y + B*sqr(y) + C*y*sqr(y) - D*(sqr(y) - 2*sqr(y)*y + sqr(sqr(y)));
            ) :
            y < 2 ? (
                2*y - sqr(y);
            )
        )*wet*sign(x) + x*dry;
    );

    spl0.band_split_set(240,2400);
    spl1.band_split_set(240,2400);

  function parameters_update() (
    parameters_update_on = 1;
    group_parameters(max_local_buffer_size-64);

    // Paste all contents of @slider here

    pre = exp(input_slider*(log(10)*0.05));
    post = exp(output_slider*(log(10)*0.05));

    (setting == 0) ? wet = effect_slider*0.01*0.99999955296 : wet = effect_slider*0.01;

    dry = 1 - effect_slider*0.01;

    A = curve_slider*0.01 + 1.5;
    B = curve_slider*-0.02;
    C = curve_slider*0.01 - 0.5;
    D = 0.0625 - curve_slider*0.0025 + sqr(curve_slider)*0.000025;

    parameters_update_on = 0;
    caller = 0;
  );

@slider
  caller=1;

@serialize
  file_var(0, while_playing);
  file_var(0, while_recording);
  file_var(0, while_stopped); file_var(0, zoom_off);
  file_var(0, link_group);

  seriloop = 0;
  loop(64*16 + 27 + 16 +16 +16,
  file_var(0, gmem[seriloop]);
  seriloop += 1;
  );

  seriloop = 0;
  loop(200*16,
  file_var(0, group_generics[seriloop]);
  seriloop += 1;
  );

@sample
  S2_sample_on = 1;
  gmem[16*64 + 10 + link_group] != 1 ? link_group = 0;
  group_check_smpl();
  caller == 1 ? (
    parameters_update_on == 0 ? (
      parameters_update();
    );
  );

  // extra tk features
  playstates();
  process = 0;
  while_playing ? is_playing ? process = 1;
  while_recording ? is_recording ? process = 1;
  while_stopped ? is_stopped ? process = 1;
  initialized_playstates=1;

  process == 1 ? (
    clip_slider ? (
        spl0 = clamp(spl0*pre,-1,1);
        spl1 = clamp(spl1*pre,-1,1);
    ) : (
        spl0 = clamp(spl0*pre,-2,2);
        spl1 = clamp(spl1*pre,-2,2);
    );

    effect_in_slider ? (
        band_split_slider ? (
            spl0.band_split(spl0);
            spl1.band_split(spl1);

            spl0 = waveshaper(spl0.L) + waveshaper(spl0.M*spl0.gain)*spl0.gain_div + waveshaper(spl0.H);
            spl1 = waveshaper(spl1.L) + waveshaper(spl1.M*spl1.gain)*spl1.gain_div + waveshaper(spl1.H);
        ) : (
            spl0 = waveshaper(spl0);
            spl1 = waveshaper(spl1);
        );
    );

    (setting == 0) ? (
      abs(spl0) < 0.0000000000000000555111512312578270211815834045 ? spl0 = 0 : spl0 *= post;
      abs(spl1) < 0.0000000000000000555111512312578270211815834045 ? spl1 = 0 : spl1 *= post;
    ) : (
      spl0 *= post;
      spl1 *= post;
    );
  );

<? // @gfx setup
  w_bg=768;
  h_bg=324;
  mcp_ratio="wide";
  include("DGFX/ddconfig.jsfx-inc");
?>
  tk_gfx_setup();
  gfx_ext_flags == 0 ? (  // full ui
    set_background(0);
    gfx_a=1;  
    // y= 60 & 175
    // x= each parameter offset by 100px, starting from 65
    kInput.parameter_config    ( 2,   0,  -6,   12,  0.01, 137/2,  60/2, 0, 1, 3, 1, 0);
    kEffect.parameter_config   ( 3,   0,   0,  100,   0.1, 267/2,  60/2, 0, 1, 4, 1, 0);
    kCurve.parameter_config    ( 4,   0, -50,   50,   0.1, 397/2,  60/2, 0, 1, 4, 1, 0);
    kOutput.parameter_config   ( 8,   0, -12,    0,  0.01, 527/2,  60/2, 0, 1, 3, 1, 0);
    bEdition.button_config   ( 1,             1,      0,       1,    100,      95,              1.1,     2,    1);
    bClip.button_config      ( 5,             1,      0,       1,    150,      95,              1.1,     2,    1);
    bSplit.button_config     ( 6,             1,      0,       1,    200,      95,              1.1,     2,    1);
    bBypass.button_config    ( 7,             1,      0,       1,    250,      95,              1.1,     2,    1);

    gfx_r=gfx_g=gfx_b=gfx_a=0.7; // LABELS

    kInput.attached_label("INPUT",0, "Verdana",13,'b');
    kEffect.attached_label("EFFECT",0, "Verdana",13,'b');
    kCurve.attached_label("CURVE",0, "Verdana",13,'b');
    kOutput.attached_label("OUTPUT",0, "Verdana",13,'b');
    bEdition.attached_label("IDEAL",0, "Verdana",13,'b');
    bClip.attached_label("CLIP",0, "Verdana",13,'b');
    bSplit.attached_label("SPLIT",0, "Verdana",13,'b');
    bBypass.attached_label("IN",0, "Verdana",13,'b');
    setup_dmenu("Chmaha: RC Inflator Ultimate", "1", "Analog Obsession, Tukan Studios, Pitufodelbosque, ReArtist", 0.3); // setup menu, arguments: jsfx name, version, graphics, zoom
    mouse_wheel=0;
  ):gfx_ext_flags == 1 ? ( // embedded mcp ui
    set_background(1,0.655,0.596,0.235);
    kInput.parameter_config      ( 2,   0,  -6,   12,  0.01,   33/2,  10/2, 0, 1, 3, 1, 0);
    kEffect.parameter_config     ( 3,   0,   0,  100,   0.1,  141/2,  10/2, 0, 1, 4, 1, 0);
    kCurve.parameter_config      ( 4,   0, -50,   50,   0.1,   33/2, 105/2, 0, 1, 4, 1, 0);
    kOutput.parameter_config     ( 8,   0, -12,    0,  0.01,  141/2, 105/2, 0, 1, 3, 1, 0);
    gfx_r=gfx_g=gfx_b=gfx_a=0.7; // LABELS
    kInput.attached_label("IN",-4, "Verdana",22,'b');
    kEffect.attached_label("EFFECT",-4, "Verdana",22,'b');
    kCurve.attached_label("CURVE",-4, "Verdana",22,'b');
    kOutput.attached_label("OUT",-4, "Verdana",22,'b');
    mouse_wheel=0;
  );
  
  // update parameters
 S2_sample_on == 0 ? (
 gmem[16*64 + 10 + link_group] != 1 ? link_group = 0;
 group_check_smpl();
 caller == 1 ? (
   parameters_update_on == 0 ? (
     parameters_update();
   );
 );
 );
 S2_sample_on = 0;